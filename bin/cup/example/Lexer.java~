/* The following code was generated by JFlex 1.3.5 on 11/11/20, 11:55 AM */

package cup.example; 
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.*;
import java.io.InputStream;
import java_cup.runtime.ComplexSymbolFactory;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 11/11/20, 11:55 AM from the specification file
 * <tt>file:/C:/Users/Victor/eclipse-workspace/LexerHTML/lexer.jflex</tt>
 */
class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\41\0\1\0\10\0\1\0\2\0\1\0\1\0\1\7\1\0\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\5\0\1\1\1\0\1\2\6\0"+
    "\1\35\1\37\10\0\1\36\21\0\1\12\1\3\1\24\1\5\1\14"+
    "\1\10\1\26\1\25\1\20\2\0\1\23\1\13\1\17\1\4\1\21"+
    "\1\0\1\11\1\15\1\16\1\22\3\0\1\6\uff86\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    32,    64,    96,   128,   160,   192,   224,    64,   256, 
      288,   320,   352,    64,   384,   416,   448,   480,   512,   544, 
       64,   576,    64,   608,   640,   672,   704,   736,   768,   800, 
      832,   864,   896,   928,   960,   992,  1024,  1056,  1088,  1120, 
     1152,  1184,    64,    64,  1216,  1248,  1280,  1312,  1344,    64, 
       64,  1376,    64,  1408,    64,    64,    64,    64,    64,    64, 
     1440,  1472,  1504,    64,  1536,  1568,  1600,  1632,  1664,    64, 
     1696,  1728,  1760,  1792,  1824,  1856,  1888,  1920,    64,    64, 
       64,  1952,  1984,  2016,  2048,  2080,  2112,  2144,  2176,  2208, 
     2240,  2272,  2304,  2336,  2368,  2400,    64,    64,  2432,  2464, 
     2496,  2528,    64,  2560,  2592,  2624,  2656,    64,  2688,  2720, 
     2752,    64,  2784,  2816,  2848,  2880,  2912,  2944,  2976,    64, 
       64,  3008,    64,  3040,    64,    64,  3072,  3104,    64,    64, 
       64,    64,    64,    64,    64,    64,  3136,  3168,  3200,  3232, 
     3264,  3296,  3328,  3360,  3392,    64,  3424,  3456,  3488,  3520, 
     3552,  3584,  3616,  3648,  3680,    64,    64,  3712,  3744,  3776, 
     3808,  3840,    64,  3872,    64,    64,    64,  3904,    64,  3936, 
       64,    64,    64,  3968,    64,    64,  4000,  4032,  4064,  4096, 
     4128,  4160,    64,  4192,    64,  4224,    64,  4256,  4288,    64, 
     4320,    64,  4352,  4384,  4416,  4448,    64,  4480,    64,  4512, 
       64,    64,    64,  4544,  4576,    64,    64
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\0\1\2\1\3\36\0\1\4\1\0\1\5\1\6"+
    "\2\0\1\7\1\10\1\0\1\11\2\0\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\107\0"+
    "\1\23\6\0\1\24\4\0\1\25\47\0\1\26\1\0"+
    "\1\27\17\0\1\30\1\31\3\0\1\32\1\0\1\33"+
    "\2\0\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\16\0\1\45\4\0\1\46\41\0\1\47"+
    "\1\50\5\0\1\51\20\0\1\52\1\0\1\53\3\0"+
    "\1\54\1\55\12\0\1\56\16\0\1\57\46\0\1\60"+
    "\3\0\1\61\43\0\1\62\34\0\1\63\33\0\1\64"+
    "\34\0\1\65\4\0\1\66\10\0\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\41\0\1\75\6\0\1\76\50\0"+
    "\1\77\23\0\1\100\1\0\1\101\54\0\1\102\1\0"+
    "\1\103\20\0\1\104\4\0\1\105\30\0\1\106\50\0"+
    "\1\107\1\110\5\0\1\111\22\0\1\112\3\0\1\113"+
    "\1\114\12\0\1\115\16\0\1\116\35\0\1\117\37\0"+
    "\1\120\37\0\1\121\20\0\1\122\34\0\1\123\33\0"+
    "\1\124\41\0\1\125\10\0\1\126\1\127\1\130\1\131"+
    "\1\132\1\133\14\0\1\134\5\0\1\135\32\0\1\136"+
    "\37\0\1\137\50\0\1\140\17\0\1\141\15\0\1\142"+
    "\22\0\1\143\36\0\1\144\50\0\1\145\33\0\1\146"+
    "\55\0\1\147\32\0\1\150\35\0\1\151\33\0\1\152"+
    "\63\0\1\153\6\0\1\154\51\0\1\155\24\0\1\156"+
    "\50\0\1\157\23\0\1\160\46\0\1\161\5\0\1\162"+
    "\32\0\1\163\37\0\1\164\50\0\1\165\17\0\1\166"+
    "\15\0\1\167\20\0\1\170\37\0\1\171\40\0\1\172"+
    "\36\0\1\173\45\0\1\174\31\0\1\175\37\0\1\176"+
    "\54\0\1\177\33\0\1\200\26\0\1\201\37\0\1\202"+
    "\37\0\1\203\37\0\1\204\37\0\1\205\37\0\1\206"+
    "\50\0\1\207\42\0\1\210\34\0\1\211\47\0\1\212"+
    "\30\0\1\213\30\0\1\214\55\0\1\215\26\0\1\216"+
    "\36\0\1\217\50\0\1\220\33\0\1\221\44\0\1\222"+
    "\16\0\1\223\41\0\1\224\41\0\1\225\51\0\1\226"+
    "\32\0\1\227\42\0\1\230\34\0\1\231\47\0\1\232"+
    "\30\0\1\233\25\0\1\234\37\0\1\235\60\0\1\236"+
    "\25\0\1\237\44\0\1\240\44\0\1\241\30\0\1\242"+
    "\46\0\1\243\40\0\1\244\21\0\1\245\45\0\1\246"+
    "\30\0\1\247\44\0\1\250\43\0\1\251\35\0\1\252"+
    "\25\0\1\253\54\0\1\254\22\0\1\255\41\0\1\256"+
    "\35\0\1\257\37\0\1\260\51\0\1\261\46\0\1\262"+
    "\40\0\1\263\27\0\1\264\35\0\1\265\41\0\1\266"+
    "\25\0\1\267\52\0\1\270\40\0\1\271\34\0\1\272"+
    "\35\0\1\273\45\0\1\274\35\0\1\275\24\0\1\276"+
    "\53\0\1\277\23\0\1\300\50\0\1\301\35\0\1\302"+
    "\42\0\1\303\37\0\1\304\25\0\1\305\51\0\1\306"+
    "\25\0\1\307\51\0\1\310\25\0\1\311\53\0\1\312"+
    "\36\0\1\313\40\0\1\314\36\0\1\315\24\0\1\316"+
    "\37\0\1\317\35\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  0,  1,  0,  0,  0,  9,  0,  0,  0,  1,  9,  1,  0, 
     0,  0,  0,  0,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  1,  0,  0, 
     0,  9,  9,  0,  9,  0,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  9,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  9,  0,  9,  9,  0,  0, 
     9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0, 
     0,  1,  9,  0,  9,  9,  9,  0,  9,  0,  9,  9,  9,  0,  9,  9, 
     0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  9,  0,  0,  9,  0,  9, 
     0,  0,  0,  0,  9,  0,  9,  0,  9,  9,  9,  0,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */

	private ComplexSymbolFactory symbolFactory;
	
    public Lexer(ComplexSymbolFactory factory, InputStream in){
    	this(new java.io.InputStreamReader(in));
    	this.symbolFactory = factory;
    }
   
    StringBuffer string = new StringBuffer();
    
    private Symbol symbol(int code){
         int yylen = yylength();
         Location left = new Location(yyline + 1, yycolumn + 1, yychar);
         Location right = new Location(yyline + 1, yycolumn + yylen, yychar + yylen);
         // Calculate symbol name
         int max_code = sym.terminalNames.length;
         String name = code < max_code ? sym.terminalNames[code] : "<UNKNOWN(" + yytext() + ")>";
         	return this.symbolFactory.newSymbol(name, code, left, right);
        //new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int code, Object value){
         // Calculate symbol location
    	 int yylen = yylength();
         Location left = new Location(yyline + 1, yycolumn + 1, yychar);
         Location right = new Location(yyline + 1, yycolumn + yylen, yychar + yylen);
         // Calculate symbol name
         int max_code = sym.terminalNames.length;
         String name = code < max_code ? sym.terminalNames[code] : "<UNKNOWN(" + yytext() + ")>";
        	 return this.symbolFactory.newSymbol(name, code, left, right, value);
        //new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[4608];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 96) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
return symbol(sym.EOF);

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 133: 
          {  return symbol(sym.h6Close);  }
        case 208: break;
        case 132: 
          {  return symbol(sym.h5Close);  }
        case 209: break;
        case 131: 
          {  return symbol(sym.h4Close);  }
        case 210: break;
        case 130: 
          {  return symbol(sym.h3Close);  }
        case 211: break;
        case 129: 
          {  return symbol(sym.h2Close);  }
        case 212: break;
        case 128: 
          {  return symbol(sym.h1Close);  }
        case 213: break;
        case 56: 
          {  return symbol(sym.h3Open);  }
        case 214: break;
        case 55: 
          {  return symbol(sym.h2Open);  }
        case 215: break;
        case 54: 
          {  return symbol(sym.h1Open);  }
        case 216: break;
        case 50: 
          {  return symbol(sym.liOpen);  }
        case 217: break;
        case 49: 
          {  return symbol(sym.ulOpen);  }
        case 218: break;
        case 45: 
          {  return symbol(sym.thOpen);  }
        case 219: break;
        case 43: 
          {  return symbol(sym.trOpen);  }
        case 220: break;
        case 42: 
          {  return symbol(sym.tdOpen);  }
        case 221: break;
        case 2: 
          {  return symbol(sym.endTag);  }
        case 222: break;
        case 22: 
          {  return symbol(sym.olOpen);  }
        case 223: break;
        case 57: 
          {  return symbol(sym.h4Open);  }
        case 224: break;
        case 58: 
          {  return symbol(sym.h5Open);  }
        case 225: break;
        case 59: 
          {  return symbol(sym.h6Open);  }
        case 226: break;
        case 63: 
          {  return symbol(sym.bClose);  }
        case 227: break;
        case 69: 
          {  return symbol(sym.aClose);  }
        case 228: break;
        case 78: 
          {  return symbol(sym.iClose);  }
        case 229: break;
        case 79: 
          {  return symbol(sym.pClose);  }
        case 230: break;
        case 80: 
          {  return symbol(sym.uClose);  }
        case 231: break;
        case 96: 
          {  return symbol(sym.subOpen);  }
        case 232: break;
        case 97: 
          {  return symbol(sym.supOpen);  }
        case 233: break;
        case 111: 
          {  return symbol(sym.olClose);  }
        case 234: break;
        case 119: 
          {  return symbol(sym.tdClose);  }
        case 235: break;
        case 120: 
          {  return symbol(sym.trClose);  }
        case 236: break;
        case 122: 
          {  return symbol(sym.thClose);  }
        case 237: break;
        case 124: 
          {  return symbol(sym.ulClose);  }
        case 238: break;
        case 125: 
          {  return symbol(sym.liClose);  }
        case 239: break;
        case 200: 
          {  return symbol(sym.centerClose);  }
        case 240: break;
        case 198: 
          {  return symbol(sym.selectClose);  }
        case 241: break;
        case 196: 
          {  return symbol(sym.optionClose);  }
        case 242: break;
        case 191: 
          {  return symbol(sym.tableClose);  }
        case 243: break;
        case 189: 
          {  return symbol(sym.smallClose);  }
        case 244: break;
        case 186: 
          {  return symbol(sym.centerOpen);  }
        case 245: break;
        case 184: 
          {  return symbol(sym.selectOpen);  }
        case 246: break;
        case 171: 
          {  return symbol(sym.optionOpen);  }
        case 247: break;
        case 182: 
          {  return symbol(sym.htmlClose);  }
        case 248: break;
        case 175: 
          {  return symbol(sym.fontClose);  }
        case 249: break;
        case 174: 
          {  return symbol(sym.formClose);  }
        case 250: break;
        case 172: 
          {  return symbol(sym.bodyClose);  }
        case 251: break;
        case 165: 
          {  return symbol(sym.tableOpen);  }
        case 252: break;
        case 162: 
          {  return symbol(sym.smallOpen);  }
        case 253: break;
        case 161: 
          {  return symbol(sym.frameOpen);  }
        case 254: break;
        case 156: 
          {  return symbol(sym.supClose);  }
        case 255: break;
        case 155: 
          {  return symbol(sym.subClose);  }
        case 256: break;
        case 145: 
          {  return symbol(sym.htmlOpen);  }
        case 257: break;
        case 135: 
          {  return symbol(sym.fontOpen);  }
        case 258: break;
        case 134: 
          {  return symbol(sym.formOpen);  }
        case 259: break;
        case 107: 
          {  return symbol(sym.bodyOpen);  }
        case 260: break;
        case 170: 
          {  return symbol(sym.EOF);  }
        case 261: break;
        case 52: 
          {  return symbol(sym.hr);  }
        case 262: break;
        case 20: 
          {  return symbol(sym.br);  }
        case 263: break;
        case 102: 
          {  return symbol(sym.img);  }
        case 264: break;
        case 206: 
          {  return symbol(sym.noframesClose);  }
        case 265: break;
        case 205: 
          {  return symbol(sym.framesetClose);  }
        case 266: break;
        case 202: 
          {  return symbol(sym.noframesOpen);  }
        case 267: break;
        case 201: 
          {  return symbol(sym.framesetOpen);  }
        case 268: break;
        case 168: 
          {  return symbol(sym.input);  }
        case 269: break;
        case 166: 
          {  return symbol(sym.thead);  }
        case 270: break;
        case 164: 
          {  return symbol(sym.tbody);  }
        case 271: break;
        case 4: 
          {  return symbol(sym.bOpen);  }
        case 272: break;
        case 8: 
          {  return symbol(sym.aOpen);  }
        case 273: break;
        case 12: 
          {  return symbol(sym.iOpen);  }
        case 274: break;
        case 13: 
          {  return symbol(sym.pOpen);  }
        case 275: break;
        case 14: 
          {  return symbol(sym.uOpen);  }
        case 276: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
