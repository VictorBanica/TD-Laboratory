// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C:/Users/Victor/Desktop/TD/lexical analyzer/lexer.flex

package cup.example;  
import java_cup.runtime.Symbol;
    

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements sym, java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\55\0\1\1\1\0\1\2\1\0\1\3\1\4\1\5"+
    "\1\6\1\7\1\10\5\0\1\11\1\12\1\13\42\0"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\0\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\u0185\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\23\0\1\2\1\3\3\0\1\4\3\0"+
    "\1\5\2\0\1\6\63\0\1\7\1\10\3\0\1\11"+
    "\6\0\1\12\1\0\1\13\3\0\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\3\0\1\23\1\0\1\24"+
    "\6\0\1\25\1\26\1\27\1\30\34\0\1\31\67\0"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\0\1\40"+
    "\1\0\1\41\1\0\1\42\4\0\1\43\1\44\1\45"+
    "\1\46\6\0\1\47\5\0\1\50\1\51\10\0\1\52"+
    "\16\0\1\53\45\0\1\54\1\55\7\0\1\56\31\0"+
    "\1\57\1\60\1\0\1\61\1\0\1\62\1\63\1\0"+
    "\1\64\10\0\1\65\5\0\1\66\6\0\1\67\5\0"+
    "\1\70\7\0\1\71\3\0\1\72\2\0\1\73\1\0"+
    "\1\74\1\0\1\75\1\0\1\76\4\0\1\77\20\0"+
    "\1\100\6\0\1\101\5\0\1\102\2\0\1\103\6\0"+
    "\1\104\1\0\1\105\1\106\1\0\1\107\6\0\1\110"+
    "\1\111\3\0\1\112\1\113\1\114\1\115\3\0\1\116"+
    "\1\117\10\0\1\120\1\121\1\122\7\0\1\123\5\0"+
    "\1\124\10\0\1\125\20\0\1\126\1\127\2\0\1\130"+
    "\1\131\1\132\3\0\1\133\3\0\1\134\1\135\1\0"+
    "\1\136\5\0\1\137\1\140\1\141\2\0\1\142\1\143"+
    "\2\0\1\144\3\0\1\145\6\0\1\146\1\0\1\147"+
    "\1\0\1\150\3\0\1\151\1\0\1\152\2\0\1\153"+
    "\2\0\1\154\2\0\1\155\1\0\1\156\10\0\1\157"+
    "\11\0\1\160\1\0\1\161\1\162\1\163\1\164\2\0"+
    "\1\165\1\166\5\0\1\167\4\0\1\170\1\171\1\172"+
    "\1\173\1\174\1\175\1\0\1\176\5\0\1\177\1\200"+
    "\1\201\1\0\1\202\1\0\1\203\1\204\2\0\1\205"+
    "\4\0\1\206\2\0\1\207\1\0\1\210\1\211\4\0"+
    "\1\212\1\213\10\0\1\214\1\0\1\215\2\0\1\216"+
    "\10\0\1\217\1\220\1\0\1\221\1\0\1\222\1\223"+
    "\1\0\1\224\12\0\1\225\5\0\1\226\1\227\1\230"+
    "\1\0\1\231\5\0\1\232\2\0\1\233\1\234\2\0"+
    "\1\235\3\0\1\236\2\0\1\237\1\240\2\0\1\241"+
    "\1\242\1\243\1\244\1\0\1\245\2\0\1\246\1\247"+
    "\6\0\1\250\1\251\1\0\1\252";

  private static int [] zzUnpackAction() {
    int [] result = new int[758];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\u01d4\0\u01f8\0\u021c"+
    "\0\u0240\0\u0264\0\u0288\0\u02ac\0\u02d0\0\u02f4\0\110\0\u0318"+
    "\0\u033c\0\u0360\0\u0384\0\u03a8\0\u03cc\0\u03f0\0\u0414\0\110"+
    "\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510\0\u0534"+
    "\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630\0\u0654"+
    "\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\u0750\0\u0774"+
    "\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894"+
    "\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c\0\u0990\0\u09b4"+
    "\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u0ab0\0\u0ad4"+
    "\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac\0\110\0\u0bd0"+
    "\0\u0bf4\0\u0c18\0\u0c3c\0\110\0\u0c60\0\u0c84\0\u0ca8\0\u0ccc"+
    "\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\110\0\u0d80\0\u0da4\0\u0dc8"+
    "\0\110\0\110\0\110\0\110\0\110\0\110\0\110\0\u0dec"+
    "\0\u0e10\0\u0e34\0\110\0\u0e58\0\110\0\u0e7c\0\u0ea0\0\u0ec4"+
    "\0\u0ee8\0\u0f0c\0\u0f30\0\110\0\u0f54\0\110\0\110\0\u0f78"+
    "\0\u0f9c\0\u0fc0\0\u0fe4\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098"+
    "\0\u10bc\0\u10e0\0\u1104\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8"+
    "\0\u11dc\0\u1200\0\u1224\0\u1248\0\u126c\0\u1290\0\u12b4\0\u12d8"+
    "\0\u12fc\0\u1320\0\u1344\0\110\0\u1368\0\u138c\0\u13b0\0\u13d4"+
    "\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488\0\u14ac\0\u14d0\0\u14f4"+
    "\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8\0\u15cc\0\u15f0\0\u1614"+
    "\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8\0\u16ec\0\u1710\0\u1734"+
    "\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8\0\u180c\0\u1830\0\u1854"+
    "\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908\0\u192c\0\u1950\0\u1974"+
    "\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28\0\u1a4c\0\u1a70\0\u1a94"+
    "\0\u1ab8\0\u1adc\0\u1b00\0\110\0\110\0\110\0\110\0\110"+
    "\0\110\0\u1b24\0\110\0\u1b48\0\110\0\u1b6c\0\110\0\u1b90"+
    "\0\u1bb4\0\u1bd8\0\u1bfc\0\110\0\110\0\110\0\110\0\u1c20"+
    "\0\u1c44\0\u1c68\0\u1c8c\0\u1cb0\0\u1cd4\0\110\0\u1cf8\0\u1d1c"+
    "\0\u1d40\0\u1d64\0\u1d88\0\110\0\110\0\u1dac\0\u1dd0\0\u1df4"+
    "\0\u1e18\0\u1e3c\0\u1e60\0\u1e84\0\u1ea8\0\110\0\u1ecc\0\u1ef0"+
    "\0\u1f14\0\u1f38\0\u1f5c\0\u1f80\0\u1fa4\0\u1fc8\0\u1fec\0\u2010"+
    "\0\u2034\0\u2058\0\u207c\0\u20a0\0\110\0\u20c4\0\u20e8\0\u210c"+
    "\0\u2130\0\u2154\0\u2178\0\u219c\0\u21c0\0\u21e4\0\u2208\0\u222c"+
    "\0\u2250\0\u2274\0\u2298\0\u22bc\0\u22e0\0\u2304\0\u2328\0\u234c"+
    "\0\u2370\0\u2394\0\u23b8\0\u23dc\0\u2400\0\u2424\0\u2448\0\u246c"+
    "\0\u2490\0\u24b4\0\u24d8\0\u24fc\0\u2520\0\u2544\0\u2568\0\u258c"+
    "\0\u25b0\0\u25d4\0\110\0\110\0\u25f8\0\u261c\0\u2640\0\u2664"+
    "\0\u2688\0\u26ac\0\u26d0\0\110\0\u26f4\0\u2718\0\u273c\0\u2760"+
    "\0\u2784\0\u27a8\0\u27cc\0\u27f0\0\u2814\0\u2838\0\u285c\0\u2880"+
    "\0\u28a4\0\u28c8\0\u28ec\0\u2910\0\u2934\0\u2958\0\u297c\0\u29a0"+
    "\0\u29c4\0\u29e8\0\u2a0c\0\u2a30\0\u2a54\0\110\0\110\0\u2a78"+
    "\0\110\0\u2a9c\0\110\0\110\0\u2ac0\0\110\0\u2ae4\0\u2b08"+
    "\0\u2b2c\0\u2b50\0\u2b74\0\u2b98\0\u2bbc\0\u2be0\0\110\0\u2c04"+
    "\0\u2c28\0\u2c4c\0\u2c70\0\u2c94\0\110\0\u2cb8\0\u2cdc\0\u2d00"+
    "\0\u2d24\0\u2d48\0\u2d6c\0\110\0\u2d90\0\u2db4\0\u2dd8\0\u2dfc"+
    "\0\u2e20\0\110\0\u2e44\0\u2e68\0\u2e8c\0\u2eb0\0\u2ed4\0\u2ef8"+
    "\0\u2f1c\0\110\0\u2f40\0\u2f64\0\u2f88\0\110\0\u2fac\0\u2fd0"+
    "\0\110\0\u2ff4\0\110\0\u3018\0\110\0\u303c\0\110\0\u3060"+
    "\0\u3084\0\u30a8\0\u30cc\0\110\0\u30f0\0\u3114\0\u3138\0\u315c"+
    "\0\u3180\0\u31a4\0\u31c8\0\u31ec\0\u3210\0\u3234\0\u3258\0\u327c"+
    "\0\u32a0\0\u32c4\0\u32e8\0\u330c\0\110\0\u3330\0\u3354\0\u3378"+
    "\0\u339c\0\u33c0\0\u33e4\0\110\0\u3408\0\u342c\0\u3450\0\u3474"+
    "\0\u3498\0\110\0\u34bc\0\u34e0\0\110\0\u3504\0\u3528\0\u354c"+
    "\0\u3570\0\u3594\0\u35b8\0\110\0\u35dc\0\110\0\110\0\u3600"+
    "\0\110\0\u3624\0\u3648\0\u366c\0\u3690\0\u36b4\0\u36d8\0\u36fc"+
    "\0\110\0\u3720\0\u3744\0\u3768\0\110\0\110\0\110\0\110"+
    "\0\u378c\0\u37b0\0\u37d4\0\110\0\110\0\u37f8\0\u381c\0\u3840"+
    "\0\u3864\0\u3888\0\u38ac\0\u38d0\0\u38f4\0\110\0\110\0\110"+
    "\0\u3918\0\u393c\0\u3960\0\u3984\0\u39a8\0\u39cc\0\u39f0\0\110"+
    "\0\u3a14\0\u3a38\0\u3a5c\0\u3a80\0\u3aa4\0\110\0\u3ac8\0\u3aec"+
    "\0\u3b10\0\u3b34\0\u3b58\0\u3b7c\0\u3ba0\0\u3bc4\0\110\0\u3be8"+
    "\0\u3c0c\0\u3c30\0\u3c54\0\u3c78\0\u3c9c\0\u3cc0\0\u3ce4\0\u3d08"+
    "\0\u3d2c\0\u3d50\0\u3d74\0\u3d98\0\u3dbc\0\u3de0\0\u3e04\0\110"+
    "\0\110\0\u3e28\0\u3e4c\0\110\0\110\0\110\0\u3e70\0\u3e94"+
    "\0\u3eb8\0\110\0\u3edc\0\u3f00\0\u3f24\0\110\0\110\0\u3f48"+
    "\0\110\0\u3f6c\0\u3f90\0\u3fb4\0\u3fd8\0\u3ffc\0\110\0\110"+
    "\0\110\0\u4020\0\u4044\0\110\0\110\0\u4068\0\u408c\0\110"+
    "\0\u40b0\0\u40d4\0\u40f8\0\110\0\u411c\0\u4140\0\u4164\0\u4188"+
    "\0\u41ac\0\u41d0\0\110\0\u41f4\0\110\0\u4218\0\110\0\u423c"+
    "\0\u4260\0\u4284\0\110\0\u42a8\0\110\0\u42cc\0\u42f0\0\110"+
    "\0\u4314\0\u4338\0\110\0\u435c\0\u4380\0\110\0\u43a4\0\110"+
    "\0\u43c8\0\u43ec\0\u4410\0\u4434\0\u4458\0\u447c\0\u44a0\0\u44c4"+
    "\0\110\0\u44e8\0\u450c\0\u4530\0\u4554\0\u4578\0\u459c\0\u45c0"+
    "\0\u45e4\0\u4608\0\110\0\u462c\0\110\0\110\0\110\0\110"+
    "\0\u4650\0\u4674\0\110\0\110\0\u4698\0\u46bc\0\u46e0\0\u4704"+
    "\0\u4728\0\110\0\u474c\0\u4770\0\u4794\0\u47b8\0\110\0\110"+
    "\0\110\0\110\0\110\0\110\0\u47dc\0\110\0\u4800\0\u4824"+
    "\0\u4848\0\u486c\0\u4890\0\110\0\110\0\110\0\u48b4\0\110"+
    "\0\u48d8\0\110\0\110\0\u48fc\0\u4920\0\110\0\u4944\0\u4968"+
    "\0\u498c\0\u49b0\0\110\0\u49d4\0\u49f8\0\110\0\u4a1c\0\110"+
    "\0\110\0\u4a40\0\u4a64\0\u4a88\0\u4aac\0\110\0\110\0\u4ad0"+
    "\0\u4af4\0\u4b18\0\u4b3c\0\u4b60\0\u4b84\0\u4ba8\0\u4bcc\0\110"+
    "\0\u4bf0\0\110\0\u4c14\0\u4c38\0\110\0\u4c5c\0\u4c80\0\u4ca4"+
    "\0\u4cc8\0\u4cec\0\u4d10\0\u4d34\0\u4d58\0\110\0\110\0\u4d7c"+
    "\0\110\0\u4da0\0\110\0\110\0\u4dc4\0\110\0\u4de8\0\u4e0c"+
    "\0\u4e30\0\u4e54\0\u4e78\0\u4e9c\0\u4ec0\0\u4ee4\0\u4f08\0\u4f2c"+
    "\0\110\0\u4f50\0\u4f74\0\u4f98\0\u4fbc\0\u4fe0\0\110\0\110"+
    "\0\110\0\u5004\0\110\0\u5028\0\u504c\0\u5070\0\u5094\0\u50b8"+
    "\0\110\0\u50dc\0\u5100\0\110\0\110\0\u5124\0\u5148\0\110"+
    "\0\u516c\0\u5190\0\u51b4\0\110\0\u51d8\0\u51fc\0\110\0\110"+
    "\0\u5220\0\u5244\0\110\0\110\0\110\0\110\0\u5268\0\110"+
    "\0\u528c\0\u52b0\0\110\0\110\0\u52d4\0\u52f8\0\u531c\0\u5340"+
    "\0\u5364\0\u5388\0\110\0\110\0\u53ac\0\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[758];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\11\0\1\2\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\0\1\12\1\13\1\0\1\14\1\15"+
    "\1\16\1\17\1\0\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\5\0\1\26\11\0\1\27\1\30\1\31\2\0"+
    "\1\32\1\0\1\33\1\34\1\0\1\35\1\0\1\36"+
    "\1\37\1\40\1\0\1\41\1\42\1\43\66\0\1\44"+
    "\1\45\7\0\1\46\12\0\1\47\16\0\1\50\5\0"+
    "\1\51\6\0\1\52\32\0\1\53\2\0\1\54\2\0"+
    "\1\55\2\0\1\56\36\0\1\57\15\0\1\60\31\0"+
    "\1\61\27\0\1\62\16\0\1\63\30\0\1\64\12\0"+
    "\1\65\1\66\26\0\1\67\14\0\1\70\23\0\1\71"+
    "\3\0\1\72\3\0\1\73\4\0\1\74\26\0\1\75"+
    "\3\0\1\76\15\0\1\77\21\0\1\100\14\0\1\101"+
    "\42\0\1\102\33\0\1\103\10\0\1\104\4\0\1\105"+
    "\23\0\1\106\1\0\1\107\2\0\1\110\1\111\6\0"+
    "\1\112\1\0\1\113\1\114\21\0\1\115\3\0\1\116"+
    "\3\0\1\117\4\0\1\120\10\0\1\121\35\0\1\122"+
    "\23\0\1\123\11\0\1\124\5\0\1\125\33\0\1\126"+
    "\33\0\1\127\1\130\1\131\2\0\1\132\1\0\1\133"+
    "\1\134\1\0\1\135\1\0\1\136\1\137\1\140\1\0"+
    "\1\141\1\142\1\143\36\0\1\144\1\0\1\145\30\0"+
    "\1\146\54\0\1\147\1\0\1\150\13\0\1\151\1\152"+
    "\1\153\1\154\1\155\1\156\22\0\1\157\1\0\1\160"+
    "\35\0\1\161\1\162\37\0\1\163\50\0\1\164\40\0"+
    "\1\165\3\0\1\166\31\0\1\167\6\0\1\170\6\0"+
    "\1\171\21\0\1\172\1\173\1\0\1\174\3\0\1\175"+
    "\7\0\1\176\36\0\1\177\32\0\1\200\44\0\1\201"+
    "\16\0\1\202\32\0\1\203\10\0\1\204\32\0\1\205"+
    "\35\0\1\206\43\0\1\207\13\0\1\210\44\0\1\211"+
    "\36\0\1\212\31\0\1\213\43\0\1\214\3\0\1\215"+
    "\51\0\1\216\1\217\1\220\1\221\45\0\1\222\1\223"+
    "\37\0\1\224\31\0\1\225\43\0\1\226\41\0\1\227"+
    "\43\0\1\230\7\0\1\231\37\0\1\232\55\0\1\233"+
    "\23\0\1\234\60\0\1\235\31\0\1\236\12\0\1\237"+
    "\34\0\1\240\52\0\1\241\43\0\1\242\1\243\6\0"+
    "\1\244\36\0\1\245\45\0\1\246\34\0\1\247\44\0"+
    "\1\250\47\0\1\251\1\252\3\0\1\253\17\0\1\254"+
    "\1\255\1\256\1\257\1\260\1\261\3\0\1\262\1\263"+
    "\1\264\3\0\1\265\1\266\1\0\1\267\33\0\1\270"+
    "\10\0\1\271\44\0\1\272\31\0\1\273\46\0\1\274"+
    "\1\0\1\275\36\0\1\276\31\0\1\277\72\0\1\300"+
    "\16\0\1\301\41\0\1\302\25\0\1\303\30\0\1\304"+
    "\31\0\1\305\15\0\1\306\51\0\1\307\37\0\1\310"+
    "\40\0\1\311\43\0\1\312\31\0\1\313\51\0\1\314"+
    "\41\0\1\315\51\0\1\316\30\0\1\317\55\0\1\320"+
    "\32\0\1\321\54\0\1\322\1\0\1\323\13\0\1\324"+
    "\1\325\1\326\1\327\1\330\1\331\24\0\1\332\32\0"+
    "\1\333\50\0\1\334\40\0\1\335\3\0\1\336\24\0"+
    "\1\337\50\0\1\340\6\0\1\341\6\0\1\342\21\0"+
    "\1\343\2\0\1\344\3\0\1\345\7\0\1\346\36\0"+
    "\1\347\34\0\1\350\54\0\1\351\43\0\1\352\2\0"+
    "\1\353\24\0\1\354\56\0\1\355\36\0\1\356\53\0"+
    "\1\357\32\0\1\360\57\0\1\361\34\0\1\362\31\0"+
    "\1\363\44\0\1\364\14\0\1\365\26\0\1\366\57\0"+
    "\1\367\32\0\1\370\56\0\1\371\30\0\1\372\47\0"+
    "\1\373\41\0\1\374\5\0\1\375\25\0\1\376\65\0"+
    "\1\377\34\0\1\u0100\47\0\1\u0101\45\0\1\u0102\27\0"+
    "\1\u0103\52\0\1\u0104\50\0\1\u0105\44\0\1\u0106\23\0"+
    "\1\u0107\60\0\1\u0108\2\0\1\u0109\41\0\1\u010a\46\0"+
    "\1\u010b\41\0\1\u010c\22\0\1\u010d\45\0\1\u010e\63\0"+
    "\1\u010f\44\0\1\u0110\26\0\1\u0111\52\0\1\u0112\33\0"+
    "\1\u0113\46\0\1\u0114\42\0\1\u0115\36\0\1\u0116\43\0"+
    "\1\u0117\47\0\1\u0118\45\0\1\u0119\56\0\1\u011a\33\0"+
    "\1\u011b\40\0\1\u011c\53\0\1\u011d\45\0\1\u011e\31\0"+
    "\1\u011f\44\0\1\u0120\55\0\1\u0121\26\0\1\u0122\43\0"+
    "\1\u0123\46\0\1\u0124\53\0\1\u0125\25\0\1\u0126\54\0"+
    "\1\u0127\40\0\1\u0128\2\0\1\u0129\32\0\1\u012a\61\0"+
    "\1\u012b\41\0\1\u012c\32\0\1\u012d\54\0\1\u012e\43\0"+
    "\1\u012f\32\0\1\u0130\61\0\1\u0131\35\0\1\u0132\25\0"+
    "\1\u0133\43\0\1\u0134\65\0\1\u0135\27\0\1\u0136\55\0"+
    "\1\u0137\42\0\1\u0138\32\0\1\u0139\55\0\1\u013a\31\0"+
    "\1\u013b\35\0\1\u013c\64\0\1\u013d\36\0\1\u013e\44\0"+
    "\1\u013f\40\0\1\u0140\41\0\1\u0141\56\0\1\u0142\34\0"+
    "\1\u0143\44\0\1\u0144\34\0\1\u0145\52\0\1\u0146\40\0"+
    "\1\u0147\11\0\1\u0148\35\0\1\u0149\27\0\1\u014a\64\0"+
    "\1\u014b\25\0\1\u014c\54\0\1\u014d\43\0\1\u014e\2\0"+
    "\1\u014f\24\0\1\u0150\56\0\1\u0151\35\0\1\u0152\57\0"+
    "\1\u0153\34\0\1\u0154\31\0\1\u0155\44\0\1\u0156\14\0"+
    "\1\u0157\26\0\1\u0158\70\0\1\u0159\36\0\1\u015a\43\0"+
    "\1\u015b\35\0\1\u015c\43\0\1\u015d\42\0\1\u015e\53\0"+
    "\1\u015f\40\0\1\u0160\34\0\1\u0161\37\0\1\u0162\51\0"+
    "\1\u0163\43\0\1\u0164\34\0\1\u0165\40\0\1\u0166\41\0"+
    "\1\u0167\63\0\1\u0168\1\0\1\u0169\40\0\1\u016a\42\0"+
    "\1\u016b\40\0\1\u016c\30\0\1\u016d\53\0\1\u016e\47\0"+
    "\1\u016f\46\0\1\u0170\32\0\1\u0171\55\0\1\u0172\1\0"+
    "\1\u0173\21\0\1\u0174\16\0\1\u0175\2\0\1\u0176\43\0"+
    "\1\u0177\42\0\1\u0178\43\0\1\u0179\22\0\1\u017a\17\0"+
    "\1\u017b\25\0\1\u017c\62\0\1\u017d\27\0\1\u017e\41\0"+
    "\1\u017f\61\0\1\u0180\52\0\1\u0181\13\0\1\u0182\51\0"+
    "\1\u0183\43\0\1\u0184\46\0\1\u0185\32\0\1\u0186\13\0"+
    "\1\u0187\33\0\1\u0188\57\0\1\u0189\37\0\1\u018a\27\0"+
    "\1\u018b\60\0\1\u018c\26\0\1\u018d\50\0\1\u018e\36\0"+
    "\1\u018f\64\0\1\u0190\34\0\1\u0191\50\0\1\u0192\36\0"+
    "\1\u0193\31\0\1\u0194\65\0\1\u0195\23\0\1\u0196\43\0"+
    "\1\u0197\60\0\1\u0198\50\0\1\u0199\21\0\1\u019a\53\0"+
    "\1\u019b\45\0\1\u019c\50\0\1\u019d\26\0\1\u019e\67\0"+
    "\1\u019f\15\0\1\u01a0\65\0\1\u01a1\41\0\1\u01a2\24\0"+
    "\1\u01a3\54\0\1\u01a4\27\0\1\u01a5\17\0\1\u01a6\45\0"+
    "\1\u01a7\27\0\1\u01a8\51\0\1\u01a9\33\0\1\u01aa\45\0"+
    "\1\u01ab\35\0\1\u01ac\66\0\1\u01ad\26\0\1\u01ae\37\0"+
    "\1\u01af\57\0\1\u01b0\33\0\1\u01b1\35\0\1\u01b2\51\0"+
    "\1\u01b3\37\0\1\u01b4\41\0\1\u01b5\45\0\1\u01b6\51\0"+
    "\1\u01b7\41\0\1\u01b8\50\0\1\u01b9\34\0\1\u01ba\50\0"+
    "\1\u01bb\62\0\1\u01bc\36\0\1\u01bd\43\0\1\u01be\35\0"+
    "\1\u01bf\43\0\1\u01c0\42\0\1\u01c1\50\0\1\u01c2\34\0"+
    "\1\u01c3\37\0\1\u01c4\51\0\1\u01c5\43\0\1\u01c6\35\0"+
    "\1\u01c7\43\0\1\u01c8\60\0\1\u01c9\22\0\1\u01ca\60\0"+
    "\1\u01cb\30\0\1\u01cc\53\0\1\u01cd\35\0\1\u01ce\65\0"+
    "\1\u01cf\20\0\1\u01d0\61\0\1\u01d1\42\0\1\u01d2\37\0"+
    "\1\u01d3\25\0\1\u01d4\43\0\1\u01d5\64\0\1\u01d6\41\0"+
    "\1\u01d7\44\0\1\u01d8\44\0\1\u01d9\24\0\1\u01da\61\0"+
    "\1\u01db\32\0\1\u01dc\42\0\1\u01dd\35\0\1\u01de\43\0"+
    "\1\u01df\43\0\1\u01e0\45\0\1\u01e1\45\0\1\u01e2\56\0"+
    "\1\u01e3\46\0\1\u01e4\35\0\1\u01e5\33\0\1\u01e6\57\0"+
    "\1\u01e7\23\0\1\u01e8\21\0\1\u01e9\42\0\1\u01ea\45\0"+
    "\1\u01eb\22\0\1\u01ec\47\0\1\u01ed\35\0\1\u01ee\45\0"+
    "\1\u01ef\47\0\1\u01f0\41\0\1\u01f1\55\0\1\u01f2\32\0"+
    "\1\u01f3\56\0\1\u01f4\35\0\1\u01f5\36\0\1\u01f6\56\0"+
    "\1\u01f7\44\0\1\u01f8\43\0\1\u01f9\40\0\1\u01fa\31\0"+
    "\1\u01fb\43\0\1\u01fc\56\0\1\u01fd\50\0\1\u01fe\24\0"+
    "\1\u01ff\12\0\1\u0200\3\0\1\u0201\24\0\1\u0202\60\0"+
    "\1\u0203\27\0\1\u0204\52\0\1\u0205\45\0\1\u0206\26\0"+
    "\1\u0207\41\0\1\u0208\43\0\1\u0209\57\0\1\u020a\52\0"+
    "\1\u020b\20\0\1\u020c\43\0\1\u020d\43\0\1\u020e\64\0"+
    "\1\u020f\27\0\1\u0210\61\0\1\u0211\20\0\1\u0212\64\0"+
    "\1\u0213\42\0\1\u0214\41\0\1\u0215\25\0\1\u0216\43\0"+
    "\1\u0217\51\0\1\u0218\35\0\1\u0219\51\0\1\u021a\43\0"+
    "\1\u021b\37\0\1\u021c\60\0\1\u021d\30\0\1\u021e\53\0"+
    "\1\u021f\35\0\1\u0220\56\0\1\u0221\44\0\1\u0222\36\0"+
    "\1\u0223\44\0\1\u0224\50\0\1\u0225\7\0\1\u0226\67\0"+
    "\1\u0227\30\0\1\u0228\62\0\1\u0229\45\0\1\u022a\30\0"+
    "\1\u022b\35\0\1\u022c\3\0\1\u022d\44\0\1\u022e\40\0"+
    "\1\u022f\50\0\1\u0230\57\0\1\u0231\36\0\1\u0232\50\0"+
    "\1\u0233\34\0\1\u0234\27\0\1\u0235\51\0\1\u0236\35\0"+
    "\1\u0237\51\0\1\u0238\55\0\1\u0239\45\0\1\u023a\21\0"+
    "\1\u023b\61\0\1\u023c\25\0\1\u023d\64\0\1\u023e\44\0"+
    "\1\u023f\21\0\1\u0240\54\0\1\u0241\14\0\1\u0242\15\0"+
    "\1\u0243\57\0\1\u0244\60\0\1\u0245\20\0\1\u0246\60\0"+
    "\1\u0247\20\0\1\u0248\53\0\1\u0249\46\0\1\u024a\44\0"+
    "\1\u024b\50\0\1\u024c\44\0\1\u024d\40\0\1\u024e\45\0"+
    "\1\u024f\42\0\1\u0250\23\0\1\u0251\51\0\1\u0252\60\0"+
    "\1\u0253\32\0\1\u0254\33\0\1\u0255\57\0\1\u0256\37\0"+
    "\1\u0257\37\0\1\u0258\65\0\1\u0259\21\0\1\u025a\35\0"+
    "\1\u025b\53\0\1\u025c\33\0\1\u025d\43\0\1\u025e\43\0"+
    "\1\u025f\64\0\1\u0260\44\0\1\u0261\36\0\1\u0262\44\0"+
    "\1\u0263\50\0\1\u0264\26\0\1\u0265\43\0\1\u0266\41\0"+
    "\1\u0267\45\0\1\u0268\61\0\1\u0269\17\0\1\u026a\64\0"+
    "\1\u026b\41\0\1\u026c\31\0\1\u026d\42\0\1\u026e\37\0"+
    "\1\u026f\43\0\1\u0270\43\0\1\u0271\65\0\1\u0272\26\0"+
    "\1\u0273\36\0\1\u0274\45\0\1\u0275\41\0\1\u0276\53\0"+
    "\1\u0277\43\0\1\u0278\37\0\1\u0279\45\0\1\u027a\47\0"+
    "\1\u027b\37\0\1\u027c\43\0\1\u027d\35\0\1\u027e\51\0"+
    "\1\u027f\35\0\1\u0280\55\0\1\u0281\31\0\1\u0282\43\0"+
    "\1\u0283\71\0\1\u0284\23\0\1\u0285\35\0\1\u0286\50\0"+
    "\1\u0287\7\0\1\u0288\1\0\1\u0289\4\0\1\u028a\17\0"+
    "\1\u028b\66\0\1\u028c\25\0\1\u028d\36\0\1\u028e\61\0"+
    "\1\u028f\32\0\1\u0290\36\0\1\u0291\72\0\1\u0292\26\0"+
    "\1\u0293\37\0\1\u0294\43\0\1\u0295\60\0\1\u0296\42\0"+
    "\1\u0297\32\0\1\u0298\62\0\1\u0299\31\0\1\u029a\50\0"+
    "\1\u029b\34\0\1\u029c\41\0\1\u029d\43\0\1\u029e\35\0"+
    "\1\u029f\37\0\1\u02a0\55\0\1\u02a1\31\0\1\u02a2\55\0"+
    "\1\u02a3\36\0\1\u02a4\36\0\1\u02a5\47\0\1\u02a6\55\0"+
    "\1\u02a7\47\0\1\u02a8\40\0\1\u02a9\43\0\1\u02aa\50\0"+
    "\1\u02ab\1\u02ac\36\0\1\u02ad\23\0\1\u02ae\43\0\1\u02af"+
    "\53\0\1\u02b0\33\0\1\u02b1\61\0\1\u02b2\50\0\1\u02b3"+
    "\42\0\1\u02b4\23\0\1\u02b5\41\0\1\u02b6\50\0\1\u02b7"+
    "\50\0\1\u02b8\50\0\1\u02b9\42\0\1\u02ba\43\0\1\u02bb"+
    "\37\0\1\u02bc\47\0\1\u02bd\35\0\1\u02be\56\0\1\u02bf"+
    "\33\0\1\u02c0\30\0\1\u02c1\65\0\1\u02c2\47\0\1\u02c3"+
    "\42\0\1\u02c4\41\0\1\u02c5\26\0\1\u02c6\35\0\1\u02c7"+
    "\43\0\1\u02c8\43\0\1\u02c9\64\0\1\u02ca\22\0\1\u02cb"+
    "\51\0\1\u02cc\56\0\1\u02cd\32\0\1\u02ce\43\0\1\u02cf"+
    "\51\0\1\u02d0\25\0\1\u02d1\54\0\1\u02d2\43\0\1\u02d3"+
    "\32\0\1\u02d4\43\0\1\u02d5\61\0\1\u02d6\33\0\1\u02d7"+
    "\35\0\1\u02d8\64\0\1\u02d9\36\0\1\u02da\51\0\1\u02db"+
    "\21\0\1\u02dc\4\0\1\u02dd\6\0\1\u02de\27\0\1\u02df"+
    "\43\0\1\u02e0\53\0\1\u02e1\56\0\1\u02e2\20\0\1\u02e3"+
    "\43\0\1\u02e4\43\0\1\u02e5\43\0\1\u02e6\55\0\1\u02e7"+
    "\31\0\1\u02e8\45\0\1\u02e9\53\0\1\u02ea\31\0\1\u02eb"+
    "\43\0\1\u02ec\65\0\1\u02ed\42\0\1\u02ee\32\0\1\u02ef"+
    "\56\0\1\u02f0\33\0\1\u02f1\41\0\1\u02f2\32\0\1\u02f3"+
    "\43\0\1\u02f4\66\0\1\u02f5\20\0\1\u02f6\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21456];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\23\0\1\11\1\1\3\0\1\1\3\0"+
    "\1\11\2\0\1\1\63\0\1\11\1\1\3\0\1\11"+
    "\6\0\1\1\1\0\1\11\3\0\7\11\3\0\1\11"+
    "\1\0\1\11\6\0\1\11\1\1\2\11\34\0\1\11"+
    "\67\0\6\11\1\0\1\11\1\0\1\11\1\0\1\11"+
    "\4\0\4\11\6\0\1\11\5\0\2\11\10\0\1\11"+
    "\16\0\1\11\45\0\2\11\7\0\1\11\31\0\2\11"+
    "\1\0\1\11\1\0\2\11\1\0\1\11\10\0\1\11"+
    "\5\0\1\11\6\0\1\11\5\0\1\11\7\0\1\11"+
    "\3\0\1\11\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\1\11\20\0\1\11\6\0\1\11"+
    "\5\0\1\11\2\0\1\11\6\0\1\11\1\0\2\11"+
    "\1\0\1\11\6\0\1\1\1\11\3\0\4\11\3\0"+
    "\2\11\10\0\3\11\7\0\1\11\5\0\1\11\10\0"+
    "\1\11\20\0\2\11\2\0\3\11\3\0\1\11\3\0"+
    "\2\11\1\0\1\11\5\0\3\11\2\0\2\11\2\0"+
    "\1\11\3\0\1\11\6\0\1\11\1\0\1\11\1\0"+
    "\1\11\3\0\1\11\1\0\1\11\2\0\1\11\2\0"+
    "\1\11\2\0\1\11\1\0\1\11\10\0\1\11\11\0"+
    "\1\11\1\0\4\11\2\0\2\11\5\0\1\11\4\0"+
    "\6\11\1\0\1\11\5\0\3\11\1\0\1\11\1\0"+
    "\2\11\2\0\1\11\4\0\1\11\2\0\1\11\1\0"+
    "\2\11\4\0\2\11\10\0\1\11\1\0\1\11\2\0"+
    "\1\11\10\0\2\11\1\0\1\11\1\0\2\11\1\0"+
    "\1\11\12\0\1\11\5\0\3\11\1\0\1\11\5\0"+
    "\1\11\2\0\2\11\2\0\1\11\3\0\1\11\2\0"+
    "\2\11\2\0\4\11\1\0\1\11\2\0\2\11\6\0"+
    "\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[758];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(sym.endTag);
            }
            // fall through
          case 171: break;
          case 2:
            { return symbol(sym.aOpen);
            }
            // fall through
          case 172: break;
          case 3:
            { return symbol(sym.bOpen);
            }
            // fall through
          case 173: break;
          case 4:
            { return symbol(sym.iOpen);
            }
            // fall through
          case 174: break;
          case 5:
            { return symbol(sym.pOpen);
            }
            // fall through
          case 175: break;
          case 6:
            { return symbol(sym.uOpen);
            }
            // fall through
          case 176: break;
          case 7:
            { return symbol(sym.aClose);
            }
            // fall through
          case 177: break;
          case 8:
            { return symbol(sym.bClose);
            }
            // fall through
          case 178: break;
          case 9:
            { return symbol(sym.iClose);
            }
            // fall through
          case 179: break;
          case 10:
            { return symbol(sym.uClose);
            }
            // fall through
          case 180: break;
          case 11:
            { return symbol(sym.br);
            }
            // fall through
          case 181: break;
          case 12:
            { return symbol(sym.h1Open);
            }
            // fall through
          case 182: break;
          case 13:
            { return symbol(sym.h2Open);
            }
            // fall through
          case 183: break;
          case 14:
            { return symbol(sym.h3Open);
            }
            // fall through
          case 184: break;
          case 15:
            { return symbol(sym.h4Open);
            }
            // fall through
          case 185: break;
          case 16:
            { return symbol(sym.h5Open);
            }
            // fall through
          case 186: break;
          case 17:
            { return symbol(sym.h6Open);
            }
            // fall through
          case 187: break;
          case 18:
            { return symbol(sym.hr);
            }
            // fall through
          case 188: break;
          case 19:
            { return symbol(sym.liOpen);
            }
            // fall through
          case 189: break;
          case 20:
            { return symbol(sym.olOpen);
            }
            // fall through
          case 190: break;
          case 21:
            { return symbol(sym.tdOpen);
            }
            // fall through
          case 191: break;
          case 22:
            { return symbol(sym.thOpen);
            }
            // fall through
          case 192: break;
          case 23:
            { return symbol(sym.trOpen);
            }
            // fall through
          case 193: break;
          case 24:
            { return symbol(sym.ulOpen);
            }
            // fall through
          case 194: break;
          case 25:
            { return symbol(sym.id);
            }
            // fall through
          case 195: break;
          case 26:
            { return symbol(sym.h1Close);
            }
            // fall through
          case 196: break;
          case 27:
            { return symbol(sym.h2Close);
            }
            // fall through
          case 197: break;
          case 28:
            { return symbol(sym.h3Close);
            }
            // fall through
          case 198: break;
          case 29:
            { return symbol(sym.h4Close);
            }
            // fall through
          case 199: break;
          case 30:
            { return symbol(sym.h5Close);
            }
            // fall through
          case 200: break;
          case 31:
            { return symbol(sym.h6Close);
            }
            // fall through
          case 201: break;
          case 32:
            { return symbol(sym.liClose);
            }
            // fall through
          case 202: break;
          case 33:
            { return symbol(sym.olClose);
            }
            // fall through
          case 203: break;
          case 34:
            { return symbol(sym.pClose);
            }
            // fall through
          case 204: break;
          case 35:
            { return symbol(sym.tdClose);
            }
            // fall through
          case 205: break;
          case 36:
            { return symbol(sym.thClose);
            }
            // fall through
          case 206: break;
          case 37:
            { return symbol(sym.trClose);
            }
            // fall through
          case 207: break;
          case 38:
            { return symbol(sym.ulClose);
            }
            // fall through
          case 208: break;
          case 39:
            { return symbol(sym.img);
            }
            // fall through
          case 209: break;
          case 40:
            { return symbol(sym.subOpen);
            }
            // fall through
          case 210: break;
          case 41:
            { return symbol(sym.supOpen);
            }
            // fall through
          case 211: break;
          case 42:
            { return symbol(sym.alt);
            }
            // fall through
          case 212: break;
          case 43:
            { return symbol(sym.dir);
            }
            // fall through
          case 213: break;
          case 44:
            { return symbol(sym.rel);
            }
            // fall through
          case 214: break;
          case 45:
            { return symbol(sym.rev);
            }
            // fall through
          case 215: break;
          case 46:
            { return symbol(sym.src);
            }
            // fall through
          case 216: break;
          case 47:
            { return symbol(sym.subClose);
            }
            // fall through
          case 217: break;
          case 48:
            { return symbol(sym.supClose);
            }
            // fall through
          case 218: break;
          case 49:
            { return symbol(sym.bodyOpen);
            }
            // fall through
          case 219: break;
          case 50:
            { return symbol(sym.fontOpen);
            }
            // fall through
          case 220: break;
          case 51:
            { return symbol(sym.formOpen);
            }
            // fall through
          case 221: break;
          case 52:
            { return symbol(sym.htmlOpen);
            }
            // fall through
          case 222: break;
          case 53:
            { return symbol(sym.abbr);
            }
            // fall through
          case 223: break;
          case 54:
            { return symbol(sym.axis);
            }
            // fall through
          case 224: break;
          case 55:
            { return symbol(sym.chr);
            }
            // fall through
          case 225: break;
          case 56:
            { return symbol(sym.cols);
            }
            // fall through
          case 226: break;
          case 57:
            { return symbol(sym.face);
            }
            // fall through
          case 227: break;
          case 58:
            { return symbol(sym.href);
            }
            // fall through
          case 228: break;
          case 59:
            { return symbol(sym.ismap);
            }
            // fall through
          case 229: break;
          case 60:
            { return symbol(sym.lang);
            }
            // fall through
          case 230: break;
          case 61:
            { return symbol(sym.link);
            }
            // fall through
          case 231: break;
          case 62:
            { return symbol(sym.loop);
            }
            // fall through
          case 232: break;
          case 63:
            { return symbol(sym.name);
            }
            // fall through
          case 233: break;
          case 64:
            { return symbol(sym.rows);
            }
            // fall through
          case 234: break;
          case 65:
            { return symbol(sym.size);
            }
            // fall through
          case 235: break;
          case 66:
            { return symbol(sym.text);
            }
            // fall through
          case 236: break;
          case 67:
            { return symbol(sym.type);
            }
            // fall through
          case 237: break;
          case 68:
            { return symbol(sym.bodyClose);
            }
            // fall through
          case 238: break;
          case 69:
            { return symbol(sym.fontClose);
            }
            // fall through
          case 239: break;
          case 70:
            { return symbol(sym.formClose);
            }
            // fall through
          case 240: break;
          case 71:
            { return symbol(sym.htmlClose);
            }
            // fall through
          case 241: break;
          case 72:
            { return symbol(sym.frameOpen);
            }
            // fall through
          case 242: break;
          case 73:
            { return symbol(sym.input);
            }
            // fall through
          case 243: break;
          case 74:
            { return symbol(sym.smallOpen);
            }
            // fall through
          case 244: break;
          case 75:
            { return symbol(sym.tableOpen);
            }
            // fall through
          case 245: break;
          case 76:
            { return symbol(sym.tbody);
            }
            // fall through
          case 246: break;
          case 77:
            { return symbol(sym.thread);
            }
            // fall through
          case 247: break;
          case 78:
            { return symbol(sym.align);
            }
            // fall through
          case 248: break;
          case 79:
            { return symbol(sym.alink);
            }
            // fall through
          case 249: break;
          case 80:
            { return symbol(sym.cls);
            }
            // fall through
          case 250: break;
          case 81:
            { return symbol(sym.clear);
            }
            // fall through
          case 251: break;
          case 82:
            { return symbol(sym.color);
            }
            // fall through
          case 252: break;
          case 83:
            { return symbol(sym.frame);
            }
            // fall through
          case 253: break;
          case 84:
            { return symbol(sym.label);
            }
            // fall through
          case 254: break;
          case 85:
            { return symbol(sym.nowrap);
            }
            // fall through
          case 255: break;
          case 86:
            { return symbol(sym.rules);
            }
            // fall through
          case 256: break;
          case 87:
            { return symbol(sym.scope);
            }
            // fall through
          case 257: break;
          case 88:
            { return symbol(sym.shape);
            }
            // fall through
          case 258: break;
          case 89:
            { return symbol(sym.start);
            }
            // fall through
          case 259: break;
          case 90:
            { return symbol(sym.style);
            }
            // fall through
          case 260: break;
          case 91:
            { return symbol(sym.title);
            }
            // fall through
          case 261: break;
          case 92:
            { return symbol(sym.value);
            }
            // fall through
          case 262: break;
          case 93:
            { return symbol(sym.vlink);
            }
            // fall through
          case 263: break;
          case 94:
            { return symbol(sym.width);
            }
            // fall through
          case 264: break;
          case 95:
            { return symbol(sym.smallClose);
            }
            // fall through
          case 265: break;
          case 96:
            { return symbol(sym.tableClose);
            }
            // fall through
          case 266: break;
          case 97:
            { return symbol(sym.centerOpen);
            }
            // fall through
          case 267: break;
          case 98:
            { return symbol(sym.optionOpen);
            }
            // fall through
          case 268: break;
          case 99:
            { return symbol(sym.selectOpen);
            }
            // fall through
          case 269: break;
          case 100:
            { return symbol(sym.action);
            }
            // fall through
          case 270: break;
          case 101:
            { return symbol(sym.border);
            }
            // fall through
          case 271: break;
          case 102:
            { return symbol(sym.compact);
            }
            // fall through
          case 272: break;
          case 103:
            { return symbol(sym.coords);
            }
            // fall through
          case 273: break;
          case 104:
            { return symbol(sym.dynsrc);
            }
            // fall through
          case 274: break;
          case 105:
            { return symbol(sym.height);
            }
            // fall through
          case 275: break;
          case 106:
            { return symbol(sym.hspace);
            }
            // fall through
          case 276: break;
          case 107:
            { return symbol(sym.lowsrc);
            }
            // fall through
          case 277: break;
          case 108:
            { return symbol(sym.method);
            }
            // fall through
          case 278: break;
          case 109:
            { return symbol(sym.noshade);
            }
            // fall through
          case 279: break;
          case 110:
            { return symbol(sym.onblur);
            }
            // fall through
          case 280: break;
          case 111:
            { return symbol(sym.onload);
            }
            // fall through
          case 281: break;
          case 112:
            { return symbol(sym.target);
            }
            // fall through
          case 282: break;
          case 113:
            { return symbol(sym.usemap);
            }
            // fall through
          case 283: break;
          case 114:
            { return symbol(sym.valign);
            }
            // fall through
          case 284: break;
          case 115:
            { return symbol(sym.vspace);
            }
            // fall through
          case 285: break;
          case 116:
            { return symbol(sym.centerClose);
            }
            // fall through
          case 286: break;
          case 117:
            { return symbol(sym.optionClose);
            }
            // fall through
          case 287: break;
          case 118:
            { return symbol(sym.selectClose);
            }
            // fall through
          case 288: break;
          case 119:
            { return symbol(sym.bgcolor);
            }
            // fall through
          case 289: break;
          case 120:
            { return symbol(sym.charoff);
            }
            // fall through
          case 290: break;
          case 121:
            { return symbol(sym.charset);
            }
            // fall through
          case 291: break;
          case 122:
            { return symbol(sym.colspan);
            }
            // fall through
          case 292: break;
          case 123:
            { return symbol(sym.controls);
            }
            // fall through
          case 293: break;
          case 124:
            { return symbol(sym.disabled);
            }
            // fall through
          case 294: break;
          case 125:
            { return symbol(sym.enctype);
            }
            // fall through
          case 295: break;
          case 126:
            { return symbol(sym.headers);
            }
            // fall through
          case 296: break;
          case 127:
            { return symbol(sym.multiple);
            }
            // fall through
          case 297: break;
          case 128:
            { return symbol(sym.noresize);
            }
            // fall through
          case 298: break;
          case 129:
            { return symbol(sym.onabort);
            }
            // fall through
          case 299: break;
          case 130:
            { return symbol(sym.onclick);
            }
            // fall through
          case 300: break;
          case 131:
            { return symbol(sym.onerror);
            }
            // fall through
          case 301: break;
          case 132:
            { return symbol(sym.onfocus);
            }
            // fall through
          case 302: break;
          case 133:
            { return symbol(sym.onkeyup);
            }
            // fall through
          case 303: break;
          case 134:
            { return symbol(sym.onreset);
            }
            // fall through
          case 304: break;
          case 135:
            { return symbol(sym.rowspan);
            }
            // fall through
          case 305: break;
          case 136:
            { return symbol(sym.selected);
            }
            // fall through
          case 306: break;
          case 137:
            { return symbol(sym.summary);
            }
            // fall through
          case 307: break;
          case 138:
            { return symbol(sym.framesetOpen);
            }
            // fall through
          case 308: break;
          case 139:
            { return symbol(sym.noframesOpen);
            }
            // fall through
          case 309: break;
          case 140:
            { return symbol(sym.hreflang);
            }
            // fall through
          case 310: break;
          case 141:
            { return symbol(sym.longdesc);
            }
            // fall through
          case 311: break;
          case 142:
            { return symbol(sym.onchange);
            }
            // fall through
          case 312: break;
          case 143:
            { return symbol(sym.onsubmit);
            }
            // fall through
          case 313: break;
          case 144:
            { return symbol(sym.onunload);
            }
            // fall through
          case 314: break;
          case 145:
            { return symbol(sym.tabindex);
            }
            // fall through
          case 315: break;
          case 146:
            { return symbol(sym.framesetClose);
            }
            // fall through
          case 316: break;
          case 147:
            { return symbol(sym.noframesClose);
            }
            // fall through
          case 317: break;
          case 148:
            { return symbol(sym.accesskey);
            }
            // fall through
          case 318: break;
          case 149:
            { return symbol(sym.onkeydown);
            }
            // fall through
          case 319: break;
          case 150:
            { return symbol(sym.onmouseup);
            }
            // fall through
          case 320: break;
          case 151:
            { return symbol(sym.scrolling);
            }
            // fall through
          case 321: break;
          case 152:
            { return symbol(sym.topmargin);
            }
            // fall through
          case 322: break;
          case 153:
            { return symbol(sym.background);
            }
            // fall through
          case 323: break;
          case 154:
            { return symbol(sym.leftmargin);
            }
            // fall through
          case 324: break;
          case 155:
            { return symbol(sym.ondblclick);
            }
            // fall through
          case 325: break;
          case 156:
            { return symbol(sym.onkeypress);
            }
            // fall through
          case 326: break;
          case 157:
            { return symbol(sym.onmouseout);
            }
            // fall through
          case 327: break;
          case 158:
            { return symbol(sym.bordercolor);
            }
            // fall through
          case 328: break;
          case 159:
            { return symbol(sym.cellpadding);
            }
            // fall through
          case 329: break;
          case 160:
            { return symbol(sym.cellspacing);
            }
            // fall through
          case 330: break;
          case 161:
            { return symbol(sym.marginwidth);
            }
            // fall through
          case 331: break;
          case 162:
            { return symbol(sym.onmousedown);
            }
            // fall through
          case 332: break;
          case 163:
            { return symbol(sym.onmousemove);
            }
            // fall through
          case 333: break;
          case 164:
            { return symbol(sym.onmouseover);
            }
            // fall through
          case 334: break;
          case 165:
            { return symbol(sym.bgproperties);
            }
            // fall through
          case 335: break;
          case 166:
            { return symbol(sym.framespacing);
            }
            // fall through
          case 336: break;
          case 167:
            { return symbol(sym.marginheight);
            }
            // fall through
          case 337: break;
          case 168:
            { return symbol(sym.acceptcharlist);
            }
            // fall through
          case 338: break;
          case 169:
            { return symbol(sym.bordercolordark);
            }
            // fall through
          case 339: break;
          case 170:
            { return symbol(sym.bordercolorlight);
            }
            // fall through
          case 340: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
