/* The following code was generated by JFlex 1.3.5 on 10/27/20, 3:10 PM */

    
import java_cup.runtime.Symbol;
    

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 10/27/20, 3:10 PM from the specification file
 * <tt>file:/C:/Users/Victor/eclipse-workspace/LexerHTML/lexer.jflex</tt>
 */
class Lexer implements symbols, java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\41\0\1\0\10\0\1\0\2\0\1\2\1\0\1\10\1\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\5\0\1\1\1\36\1\3\42\0"+
    "\1\13\1\4\1\25\1\6\1\15\1\11\1\27\1\26\1\21\1\0"+
    "\1\37\1\24\1\14\1\20\1\5\1\22\1\0\1\12\1\16\1\17"+
    "\1\23\1\41\1\40\1\42\1\7\1\43\uff85\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    36,    72,   108,   144,   180,   216,   252,   288,   324, 
      360,   396,   432,   468,   504,   540,   576,   612,   648,   684, 
      720,   756,   792,   828,   864,    72,   900,   936,   972,  1008, 
       72,  1044,  1080,  1116,  1152,  1188,  1224,  1260,  1296,  1332, 
     1368,  1404,  1440,  1476,  1512,  1548,  1584,  1620,  1656,  1692, 
     1728,  1764,  1800,  1836,  1872,  1908,  1944,  1980,  2016,  2052, 
     2088,  2124,  2160,  2196,  2232,  2268,  2304,  2340,  2376,  2412, 
     2448,  2484,  2520,  2556,  2592,  2628,  2664,  2700,  2736,  2772, 
     2808,  2844,  2880,  2916,  2952,  2988,  3024,    72,  3060,    72, 
     3096,  3132,  3168,    72,  3204,  3240,  3276,    72,  3312,  3348, 
     3384,  3420,  3456,  3492,  3528,  3564,  3600,  3636,  3672,    72, 
       72,  3708,  3744,  3780,  3816,  3852,    72,    72,  3888,    72, 
       72,    72,    72,    72,    72,    72,  3924,  3960,  3996,  4032, 
     4068,  4104,  4140,  4176,  4212,  4248,  4284,  4320,  4356,  4392, 
     4428,  4464,  4500,  4536,  4572,  4608,  4644,  4680,  4716,  4752, 
     4788,  4824,  4860,  4896,  4932,  4968,  5004,  5040,  5076,  5112, 
     5148,  5184,  5220,  5256,  5292,  5328,  5364,  5400,  5436,  5472, 
     5508,  5544,  5580,  5616,  5652,  5688,  5724,  5760,  5796,  5832, 
       72,  5868,  5904,  5940,  5976,  6012,  6048,  6084,  6120,  6156, 
     6192,  6228,  6264,  6300,  6336,  6372,  6408,  6444,  6480,  6516, 
     6552,  6588,  6624,  6660,  6696,  6732,  6768,  6804,  6840,  6876, 
       72,  6912,  6948,  6984,  7020,  7056,    72,    72,  7092,    72, 
     7128,    72,    72,    72,  7164,    72,    72,    72,    72,    72, 
       72,  7200,  7236,  7272,  7308,  7344,    72,    72,  7380,  7416, 
     7452,  7488,    72,  7524,  7560,  7596,  7632,  7668,  7704,  7740, 
     7776,  7812,  7848,  7884,  7920,  7956,  7992,  8028,  8064,  8100, 
     8136,  8172,  8208,    72,  8244,  8280,  8316,  8352,    72,    72, 
     8388,  8424,    72,  8460,  8496,  8532,  8568,  8604,  8640,  8676, 
     8712,  8748,    72,  8784,  8820,  8856,  8892,  8928,  8964,  9000, 
     9036,  9072,  9108,  9144,  9180,  9216,  9252,  9288,  9324,  9360, 
     9396,  9432,  9468,  9504,  9540,  9576,  9612,  9648,  9684,  9720, 
     9756,  9792,  9828,  9864,  9900,  9936,  9972, 10008, 10044, 10080, 
    10116, 10152, 10188, 10224, 10260, 10296, 10332, 10368,    72, 10404, 
    10440, 10476, 10512, 10548, 10584, 10620, 10656,    72,    72, 10692, 
    10728, 10764,    72,    72, 10800, 10836, 10872, 10908, 10944, 10980, 
    11016, 11052, 11088, 11124, 11160, 11196, 11232, 11268, 11304, 11340, 
    11376, 11412, 11448, 11484, 11520, 11556, 11592, 11628, 11664, 11700, 
    11736, 11772, 11808,    72, 11844,    72, 11880,    72, 11916, 11952, 
    11988, 12024, 12060,    72, 12096, 12132, 12168, 12204, 12240, 12276, 
    12312,    72, 12348, 12384, 12420, 12456, 12492,    72, 12528, 12564, 
       72, 12600, 12636, 12672, 12708,    72,    72, 12744,    72, 12780, 
    12816, 12852,    72, 12888,    72, 12924, 12960, 12996, 13032, 13068, 
       72, 13104, 13140, 13176, 13212, 13248, 13284,    72, 13320,    72, 
    13356, 13392, 13428, 13464, 13500, 13536, 13572, 13608, 13644,    72, 
    13680,    72,    72, 13716, 13752, 13788, 13824, 13860, 13896, 13932, 
       72, 13968,    72,    72,    72, 14004,    72, 14040, 14076, 14112, 
    14148, 14184, 14220, 14256, 14292, 14328, 14364, 14400, 14436, 14472, 
    14508, 14544, 14580, 14616, 14652, 14688, 14724, 14760, 14796, 14832, 
       72, 14868,    72,    72,    72, 14904, 14940, 14976, 15012, 15048, 
    15084, 15120, 15156,    72,    72, 15192,    72, 15228,    72, 15264, 
    15300, 15336,    72, 15372, 15408,    72, 15444, 15480, 15516,    72, 
    15552, 15588, 15624, 15660,    72, 15696, 15732, 15768,    72,    72, 
    15804, 15840, 15876, 15912, 15948, 15984,    72, 16020,    72, 16056, 
       72,    72, 16092, 16128,    72, 16164,    72, 16200, 16236, 16272, 
       72, 16308,    72, 16344,    72, 16380, 16416, 16452,    72, 16488, 
    16524, 16560, 16596, 16632, 16668, 16704, 16740,    72, 16776, 16812, 
    16848, 16884, 16920,    72, 16956, 16992, 17028,    72, 17064, 17100, 
    17136, 17172,    72, 17208, 17244, 17280, 17316, 17352, 17388, 17424, 
       72, 17460,    72,    72, 17496,    72, 17532,    72,    72, 17568, 
    17604, 17640, 17676, 17712, 17748, 17784, 17820,    72,    72,    72, 
       72,    72, 17856,    72, 17892,    72, 17928, 17964, 18000, 18036, 
    18072,    72, 18108,    72,    72,    72, 18144, 18180, 18216, 18252, 
       72, 18288, 18324,    72, 18360, 18396, 18432,    72,    72, 18468, 
       72, 18504, 18540, 18576, 18612,    72,    72,    72,    72, 18648, 
    18684, 18720,    72, 18756, 18792,    72,    72, 18828, 18864,    72, 
       72, 18900,    72, 18936, 18972,    72,    72, 19008, 19044, 19080, 
    19116, 19152, 19188, 19224, 19260, 19296,    72,    72,    72, 19332, 
    19368, 19404, 19440, 19476, 19512, 19548, 19584, 19620,    72,    72, 
    19656, 19692, 19728,    72,    72,    72, 19764, 19800, 19836, 19872, 
    19908, 19944, 19980, 20016,    72,    72, 20052, 20088,    72, 20124, 
    20160, 20196,    72,    72, 20232, 20268, 20304, 20340,    72, 20376, 
       72,    72, 20412, 20448, 20484,    72, 20520, 20556, 20592, 20628, 
       72, 20664, 20700, 20736, 20772,    72, 20808,    72,    72,    72, 
    20844, 20880, 20916,    72,    72,    72, 20952, 20988,    72,    72, 
    21024,    72, 21060, 21096, 21132, 21168, 21204, 21240,    72, 21276, 
       72,    72
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\0\1\2\1\0\1\3\1\4\1\5\1\6\2\0"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\0\1\20\1\21\1\22\1\23\11\0\1\24"+
    "\1\25\6\0\1\26\1\27\2\0\1\30\1\31\1\0"+
    "\1\32\2\0\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\66\0\1\44\5\0\1\45\13\0"+
    "\1\46\34\0\1\47\32\0\1\50\11\0\1\51\34\0"+
    "\1\52\1\53\35\0\1\54\7\0\1\55\5\0\1\56"+
    "\24\0\1\57\17\0\1\60\1\61\14\0\1\62\14\0"+
    "\1\63\1\0\1\64\5\0\1\65\40\0\1\66\35\0"+
    "\1\67\2\0\1\70\1\0\1\71\1\0\1\72\1\0"+
    "\1\73\1\0\1\74\1\75\22\0\1\76\1\0\1\77"+
    "\3\0\1\100\1\0\1\101\3\0\1\102\27\0\1\103"+
    "\5\0\1\104\36\0\1\105\7\0\1\106\43\0\1\107"+
    "\32\0\1\110\5\0\1\111\1\0\1\112\3\0\1\113"+
    "\27\0\1\114\7\0\1\115\6\0\1\116\1\0\1\117"+
    "\27\0\1\120\2\0\1\121\1\122\46\0\1\123\35\0"+
    "\1\124\2\0\1\125\5\0\1\126\24\0\1\127\4\0"+
    "\1\130\53\0\1\131\1\0\1\132\23\0\1\133\1\134"+
    "\3\0\1\135\1\0\1\136\2\0\1\137\1\140\1\141"+
    "\1\142\1\143\1\144\1\145\1\146\1\147\22\0\1\150"+
    "\4\0\1\151\45\0\1\152\1\153\5\0\1\154\24\0"+
    "\1\155\1\0\1\156\3\0\1\157\1\160\12\0\1\161"+
    "\22\0\1\162\52\0\1\163\3\0\1\164\47\0\1\165"+
    "\40\0\1\166\37\0\1\167\40\0\1\170\15\0\1\171"+
    "\1\172\1\173\1\174\1\175\1\176\20\0\1\177\56\0"+
    "\1\200\40\0\1\201\2\0\1\202\22\0\1\203\1\0"+
    "\1\204\2\0\1\205\1\206\1\207\1\210\1\211\1\212"+
    "\4\0\1\213\1\214\1\215\11\0\1\216\24\0\1\217"+
    "\35\0\1\220\3\0\1\221\40\0\1\222\55\0\1\223"+
    "\56\0\1\224\27\0\1\225\14\0\1\226\26\0\1\227"+
    "\23\0\1\230\56\0\1\231\1\0\1\232\41\0\1\233"+
    "\5\0\1\234\37\0\1\235\34\0\1\236\50\0\1\237"+
    "\50\0\1\240\44\0\1\241\43\0\1\242\42\0\1\243"+
    "\26\0\1\244\3\0\1\245\73\0\1\246\14\0\1\247"+
    "\34\0\1\250\4\0\1\251\44\0\1\252\52\0\1\253"+
    "\43\0\1\254\25\0\1\255\5\0\1\256\73\0\1\257"+
    "\20\0\1\260\36\0\1\261\3\0\1\262\21\0\1\263"+
    "\17\0\1\264\65\0\1\265\21\0\1\266\44\0\1\267"+
    "\33\0\1\270\12\0\1\271\17\0\1\272\7\0\1\273"+
    "\13\0\1\274\34\0\1\275\52\0\1\276\30\0\1\277"+
    "\6\0\1\300\3\0\1\301\3\0\1\302\43\0\1\303"+
    "\32\0\1\304\1\0\1\305\41\0\1\306\45\0\1\307"+
    "\41\0\1\310\5\0\1\311\44\0\1\312\27\0\1\313"+
    "\61\0\1\314\41\0\1\315\42\0\1\316\30\0\1\317"+
    "\54\0\1\320\31\0\1\321\60\0\1\322\1\0\1\323"+
    "\24\0\1\324\4\0\1\325\45\0\1\326\1\327\5\0"+
    "\1\330\26\0\1\331\3\0\1\332\1\333\12\0\1\334"+
    "\22\0\1\335\41\0\1\336\64\0\1\337\40\0\1\340"+
    "\37\0\1\341\56\0\1\342\1\343\1\344\1\345\1\346"+
    "\1\347\20\0\1\350\5\0\1\351\36\0\1\352\43\0"+
    "\1\353\54\0\1\354\23\0\1\355\15\0\1\356\26\0"+
    "\1\357\42\0\1\360\54\0\1\361\37\0\1\362\61\0"+
    "\1\363\36\0\1\364\41\0\1\365\31\0\1\366\74\0"+
    "\1\367\16\0\1\370\36\0\1\371\62\0\1\372\23\0"+
    "\1\373\44\0\1\374\53\0\1\375\32\0\1\376\44\0"+
    "\1\377\50\0\1\u0100\54\0\1\u0101\40\0\1\u0102\30\0"+
    "\1\u0103\62\0\1\u0104\1\0\1\u0105\32\0\1\u0106\44\0"+
    "\1\u0107\63\0\1\u0108\20\0\1\u0109\44\0\1\u010a\44\0"+
    "\1\u010b\44\0\1\u010c\63\0\1\u010d\43\0\1\u010e\22\0"+
    "\1\u010f\40\0\1\u0110\67\0\1\u0111\25\0\1\u0112\6\0"+
    "\1\u0113\35\0\1\u0114\37\0\1\u0115\44\0\1\u0116\54\0"+
    "\1\u0117\42\0\1\u0118\34\0\1\u0119\43\0\1\u011a\62\0"+
    "\1\u011b\22\0\1\u011c\52\0\1\u011d\31\0\1\u011e\46\0"+
    "\1\u011f\42\0\1\u0120\51\0\1\u0121\26\0\1\u0122\60\0"+
    "\1\u0123\35\0\1\u0124\44\0\1\u0125\47\0\1\u0126\51\0"+
    "\1\u0127\33\0\1\u0128\50\0\1\u0129\34\0\1\u012a\54\0"+
    "\1\u012b\27\0\1\u012c\46\0\1\u012d\41\0\1\u012e\44\0"+
    "\1\u012f\51\0\1\u0130\50\0\1\u0131\32\0\1\u0132\42\0"+
    "\1\u0133\55\0\1\u0134\33\0\1\u0135\63\0\1\u0136\16\0"+
    "\1\u0137\53\0\1\u0138\40\0\1\u0139\31\0\1\u013a\10\0"+
    "\1\u013b\51\0\1\u013c\35\0\1\u013d\40\0\1\u013e\42\0"+
    "\1\u013f\42\0\1\u0140\40\0\1\u0141\64\0\1\u0142\27\0"+
    "\1\u0143\47\0\1\u0144\45\0\1\u0145\1\0\1\u0146\33\0"+
    "\1\u0147\50\0\1\u0148\32\0\1\u0149\55\0\1\u014a\30\0"+
    "\1\u014b\54\0\1\u014c\36\0\1\u014d\5\0\1\u014e\36\0"+
    "\1\u014f\43\0\1\u0150\54\0\1\u0151\23\0\1\u0152\15\0"+
    "\1\u0153\25\0\1\u0154\50\0\1\u0155\52\0\1\u0156\37\0"+
    "\1\u0157\46\0\1\u0158\40\0\1\u0159\53\0\1\u015a\34\0"+
    "\1\u015b\34\0\1\u015c\61\0\1\u015d\32\0\1\u015e\42\0"+
    "\1\u015f\54\0\1\u0160\37\0\1\u0161\41\0\1\u0162\55\0"+
    "\1\u0163\21\0\1\u0164\62\0\1\u0165\42\0\1\u0166\44\0"+
    "\1\u0167\44\0\1\u0168\34\0\1\u0169\32\0\1\u016a\61\0"+
    "\1\u016b\32\0\1\u016c\35\0\1\u016d\63\0\1\u016e\32\0"+
    "\1\u016f\51\0\1\u0170\35\0\1\u0171\37\0\1\u0172\46\0"+
    "\1\u0173\35\0\1\u0174\54\0\1\u0175\64\0\1\u0176\27\0"+
    "\1\u0177\13\0\1\u0178\23\0\1\u0179\63\0\1\u017a\44\0"+
    "\1\u017b\24\0\1\u017c\30\0\1\u017d\54\0\1\u017e\3\0"+
    "\1\u017f\57\0\1\u0180\26\0\1\u0181\27\0\1\u0182\57\0"+
    "\1\u0183\31\0\1\u0184\61\0\1\u0185\33\0\1\u0186\45\0"+
    "\1\u0187\62\0\1\u0188\20\0\1\u0189\45\0\1\u018a\52\0"+
    "\1\u018b\34\0\1\u018c\41\0\1\u018d\66\0\1\u018e\25\0"+
    "\1\u018f\40\0\1\u0190\64\0\1\u0191\22\0\1\u0192\44\0"+
    "\1\u0193\40\0\1\u0194\43\0\1\u0195\66\0\1\u0196\27\0"+
    "\1\u0197\34\0\1\u0198\66\0\1\u0199\13\0\1\u019a\47\0"+
    "\1\u019b\55\0\1\u019c\55\0\1\u019d\21\0\1\u019e\65\0"+
    "\1\u019f\13\0\1\u01a0\50\0\1\u01a1\42\0\1\u01a2\43\0"+
    "\1\u01a3\53\0\1\u01a4\13\0\1\u01a5\23\0\1\u01a6\3\0"+
    "\1\u01a7\37\0\1\u01a8\37\0\1\u01a9\36\0\1\u01aa\10\0"+
    "\1\u01ab\17\0\1\u01ac\31\0\1\u01ad\11\0\1\u01ae\22\0"+
    "\1\u01af\54\0\1\u01b0\42\0\1\u01b1\44\0\1\u01b2\44\0"+
    "\1\u01b3\31\0\1\u01b4\53\0\1\u01b5\55\0\1\u01b6\11\0"+
    "\1\u01b7\45\0\1\u01b8\55\0\1\u01b9\36\0\1\u01ba\46\0"+
    "\1\u01bb\40\0\1\u01bc\53\0\1\u01bd\34\0\1\u01be\52\0"+
    "\1\u01bf\31\0\1\u01c0\50\0\1\u01c1\41\0\1\u01c2\52\0"+
    "\1\u01c3\44\0\1\u01c4\25\0\1\u01c5\51\0\1\u01c6\34\0"+
    "\1\u01c7\50\0\1\u01c8\47\0\1\u01c9\41\0\1\u01ca\40\0"+
    "\1\u01cb\43\0\1\u01cc\53\0\1\u01cd\26\0\1\u01ce\50\0"+
    "\1\u01cf\56\0\1\u01d0\41\0\1\u01d1\35\0\1\u01d2\40\0"+
    "\1\u01d3\47\0\1\u01d4\32\0\1\u01d5\52\0\1\u01d6\34\0"+
    "\1\u01d7\44\0\1\u01d8\62\0\1\u01d9\36\0\1\u01da\31\0"+
    "\1\u01db\13\0\1\u01dc\1\u01dd\45\0\1\u01de\42\0\1\u01df"+
    "\35\0\1\u01e0\17\0\1\u01e1\20\0\1\u01e2\66\0\1\u01e3"+
    "\43\0\1\u01e4\43\0\1\u01e5\25\0\1\u01e6\41\0\1\u01e7"+
    "\44\0\1\u01e8\44\0\1\u01e9\31\0\1\u01ea\57\0\1\u01eb"+
    "\43\0\1\u01ec\40\0\1\u01ed\62\0\1\u01ee\43\0\1\u01ef"+
    "\17\0\1\u01f0\67\0\1\u01f1\31\0\1\u01f2\55\0\1\u01f3"+
    "\17\0\1\u01f4\37\0\1\u01f5\54\0\1\u01f6\62\0\1\u01f7"+
    "\26\0\1\u01f8\30\0\1\u01f9\57\0\1\u01fa\43\0\1\u01fb"+
    "\36\0\1\u01fc\53\0\1\u01fd\54\0\1\u01fe\20\0\1\u01ff"+
    "\46\0\1\u0200\52\0\1\u0201\23\0\1\u0202\74\0\1\u0203"+
    "\20\0\1\u0204\52\0\1\u0205\34\0\1\u0206\66\0\1\u0207"+
    "\43\0\1\u0208\16\0\1\u0209\47\0\1\u020a\41\0\1\u020b"+
    "\42\0\1\u020c\50\0\1\u020d\41\0\1\u020e\64\0\1\u020f"+
    "\25\0\1\u0210\61\0\1\u0211\22\0\1\u0212\64\0\1\u0213"+
    "\25\0\1\u0214\30\0\1\u0215\53\0\1\u0216\52\0\1\u0217"+
    "\44\0\1\u0218\33\0\1\u0219\41\0\1\u021a\45\0\1\u021b"+
    "\44\0\1\u021c\44\0\1\u021d\40\0\1\u021e\41\0\1\u021f"+
    "\56\0\1\u0220\10\0\1\u0221\12\0\1\u0222\53\0\1\u0223"+
    "\40\0\1\u0224\67\0\1\u0225\31\0\1\u0226\35\0\1\u0227"+
    "\44\0\1\u0228\43\0\1\u0229\41\0\1\u022a\40\0\1\u022b"+
    "\52\0\1\u022c\35\0\1\u022d\66\0\1\u022e\44\0\1\u022f"+
    "\33\0\1\u0230\21\0\1\u0231\50\0\1\u0232\53\0\1\u0233"+
    "\57\0\1\u0234\22\0\1\u0235\50\0\1\u0236\41\0\1\u0237"+
    "\61\0\1\u0238\44\0\1\u0239\6\0\1\u023a\67\0\1\u023b"+
    "\11\0\1\u023c\41\0\1\u023d\31\0\1\u023e\34\0\1\u023f"+
    "\43\0\1\u0240\35\0\1\u0241\55\0\1\u0242\51\0\1\u0243"+
    "\31\0\1\u0244\64\0\1\u0245\50\0\1\u0246\15\0\1\u0247"+
    "\64\0\1\u0248\23\0\1\u0249\63\0\1\u024a\17\0\1\u024b"+
    "\67\0\1\u024c\24\0\1\u024d\50\0\1\u024e\37\0\1\u024f"+
    "\36\0\1\u0250\36\0\1\u0251\46\0\1\u0252\51\0\1\u0253"+
    "\44\0\1\u0254\41\0\1\u0255\63\0\1\u0256\43\0\1\u0257"+
    "\43\0\1\u0258\43\0\1\u0259\25\0\1\u025a\41\0\1\u025b"+
    "\44\0\1\u025c\40\0\1\u025d\41\0\1\u025e\46\0\1\u025f"+
    "\43\0\1\u0260\33\0\1\u0261\61\0\1\u0262\32\0\1\u0263"+
    "\67\0\1\u0264\26\0\1\u0265\60\0\1\u0266\43\0\1\u0267"+
    "\43\0\1\u0268\12\0\1\u0269\1\u026a\5\0\1\u026b\6\0"+
    "\1\u026c\56\0\1\u026d\24\0\1\u026e\32\0\1\u026f\73\0"+
    "\1\u0270\22\0\1\u0271\66\0\1\u0272\20\0\1\u0273\64\0"+
    "\1\u0274\13\0\1\u0275\50\0\1\u0276\66\0\1\u0277\22\0"+
    "\1\u0278\53\0\1\u0279\33\0\1\u027a\47\0\1\u027b\37\0"+
    "\1\u027c\64\0\1\u027d\13\0\1\u027e\73\0\1\u027f\25\0"+
    "\1\u0280\44\0\1\u0281\64\0\1\u0282\16\0\1\u0283\53\0"+
    "\1\u0284\45\0\1\u0285\32\0\1\u0286\63\0\1\u0287\32\0"+
    "\1\u0288\24\0\1\u0289\73\0\1\u028a\43\0\1\u028b\34\0"+
    "\1\u028c\52\0\1\u028d\22\0\1\u028e\43\0\1\u028f\45\0"+
    "\1\u0290\42\0\1\u0291\51\0\1\u0292\37\0\1\u0293\42\0"+
    "\1\u0294\51\0\1\u0295\41\0\1\u0296\15\0\1\u0297\7\0"+
    "\1\u0298\43\0\1\u0299\60\0\1\u029a\57\0\1\u029b\43\0"+
    "\1\u029c\43\0\1\u029d\25\0\1\u029e\41\0\1\u029f\52\0"+
    "\1\u02a0\25\0\1\u02a1\62\0\1\u02a2\36\0\1\u02a3\30\0"+
    "\1\u02a4\64\0\1\u02a5\34\0\1\u02a6\61\0\1\u02a7\43\0"+
    "\1\u02a8\26\0\1\u02a9\43\0\1\u02aa\43\0\1\u02ab\60\0"+
    "\1\u02ac\24\0\1\u02ad\42\0\1\u02ae\32\0\1\u02af\44\0"+
    "\1\u02b0\56\0\1\u02b1\61\0\1\u02b2\23\0\1\u02b3\41\0"+
    "\1\u02b4\66\0\1\u02b5\44\0\1\u02b6\40\0\1\u02b7\43\0"+
    "\1\u02b8\23\0\1\u02b9\46\0\1\u02ba\60\0\1\u02bb\20\0"+
    "\1\u02bc\57\0\1\u02bd\33\0\1\u02be\62\0\1\u02bf\43\0"+
    "\1\u02c0\25\0\1\u02c1\43\0\1\u02c2\43\0\1\u02c3\35\0"+
    "\1\u02c4\67\0\1\u02c5\22\0\1\u02c6\64\0\1\u02c7\43\0"+
    "\1\u02c8\17\0\1\u02c9\51\0\1\u02ca\40\0\1\u02cb\64\0"+
    "\1\u02cc\25\0\1\u02cd\35\0\1\u02ce\57\0\1\u02cf\43\0"+
    "\1\u02d0\53\0\1\u02d1\34\0\1\u02d2\43\0\1\u02d3\22\0"+
    "\1\u02d4\15\0\1\u02d5\11\0\1\u02d6\23\0\1\u02d7\63\0"+
    "\1\u02d8\43\0\1\u02d9\43\0\1\u02da\34\0\1\u02db\40\0"+
    "\1\u02dc\36\0\1\u02dd\62\0\1\u02de\43\0\1\u02df\43\0"+
    "\1\u02e0\20\0\1\u02e1\51\0\1\u02e2\60\0\1\u02e3\43\0"+
    "\1\u02e4\26\0\1\u02e5\60\0\1\u02e6\17\0\1\u02e7\60\0"+
    "\1\u02e8\32\0\1\u02e9\64\0\1\u02ea\32\0\1\u02eb\34\0"+
    "\1\u02ec\62\0\1\u02ed\24\0\1\u02ee\62\0\1\u02ef\43\0"+
    "\1\u02f0\5\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  1,  0,  0,  0,  9,  0,  0,  0,  1,  9,  1, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  1,  0,  0,  9,  0,  0, 
     0,  9,  0,  1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     1,  0,  0,  0,  9,  9,  0,  9,  9,  9,  9,  9,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  9,  9,  0,  9,  0,  9,  9,  9, 
     0,  9,  9,  9,  9,  9,  9,  0,  0,  0,  0,  0,  9,  9,  0,  0, 
     0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  9,  9,  0,  0, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  9,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  0,  9,  0,  9,  0,  0,  0,  0,  0,  9, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  9,  0,  0, 
     9,  0,  0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  9,  0,  9,  0, 
     0,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9,  0,  0,  0,  0,  0, 
     0,  1,  9,  0,  9,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  0,  9,  9,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  0, 
     9,  0,  9,  0,  0,  0,  9,  0,  0,  9,  0,  0,  0,  9,  0,  0, 
     0,  0,  9,  0,  0,  0,  9,  9,  0,  0,  0,  0,  0,  0,  9,  0, 
     9,  0,  9,  9,  0,  0,  9,  0,  9,  0,  0,  0,  9,  0,  9,  0, 
     9,  0,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  9,  0,  0,  0,  9,  0,  0,  0,  0,  9,  0,  0,  0, 
     0,  0,  0,  0,  9,  0,  9,  9,  0,  9,  0,  9,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  9,  9,  9,  9,  9,  0,  9,  0,  9,  0,  0, 
     0,  0,  0,  9,  0,  9,  9,  9,  0,  0,  0,  0,  9,  0,  0,  9, 
     0,  0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  9,  9,  9,  9,  0, 
     0,  0,  9,  0,  0,  9,  9,  0,  0,  9,  9,  0,  9,  0,  0,  9, 
     9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  9,  9,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  0,  9,  9,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  9,  9,  0,  0,  9,  0,  0,  0,  9,  9, 
     0,  0,  0,  0,  9,  0,  9,  9,  0,  0,  0,  9,  0,  0,  0,  0, 
     9,  0,  0,  0,  0,  9,  0,  9,  9,  9,  0,  0,  0,  9,  9,  9, 
     0,  0,  9,  9,  0,  9,  0,  0,  0,  0,  0,  0,  9,  0,  9,  9
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean yy_eof_done;

  /* user code: */
    StringBuffer string = new StringBuffer();

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[21312];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 94) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void yy_do_eof() throws java.io.IOException {
    if (!yy_eof_done) {
      yy_eof_done = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 735: 
          {  return symbol(sym.cellpadding);  }
        case 753: break;
        case 734: 
          {  return symbol(sym.cellspacing);  }
        case 754: break;
        case 733: 
          {  return symbol(sym.marginwidth);  }
        case 755: break;
        case 729: 
          {  return symbol(sym.onmousemove);  }
        case 756: break;
        case 728: 
          {  return symbol(sym.onmousedown);  }
        case 757: break;
        case 727: 
          {  return symbol(sym.onmouseover);  }
        case 758: break;
        case 725: 
          {  return symbol(sym.bordercolor);  }
        case 759: break;
        case 720: 
          {  return symbol(sym.leftmargin);  }
        case 760: break;
        case 715: 
          {  return symbol(sym.onkeypress);  }
        case 761: break;
        case 711: 
          {  return symbol(sym.onmouseout);  }
        case 762: break;
        case 710: 
          {  return symbol(sym.ondblclick);  }
        case 763: break;
        case 708: 
          {  return symbol(sym.background);  }
        case 764: break;
        case 698: 
          {  return symbol(sym., accesskey);  }
        case 765: break;
        case 531: 
          {  return symbol(sym.optionOpen);  }
        case 766: break;
        case 534: 
          {  return symbol(sym.smallClose);  }
        case 767: break;
        case 536: 
          {  return symbol(sym.tableClose);  }
        case 768: break;
        case 540: 
          {  return symbol(sym.selectOpen);  }
        case 769: break;
        case 542: 
          {  return symbol(sym.centerOpen);  }
        case 770: break;
        case 601: 
          {  return symbol(sym.optionClose);  }
        case 771: break;
        case 603: 
          {  return symbol(sym.selectClose);  }
        case 772: break;
        case 605: 
          {  return symbol(sym.centerClose);  }
        case 773: break;
        case 703: 
          {  return symbol(sym.topmargin);  }
        case 774: break;
        case 702: 
          {  return symbol(sym.scrolling);  }
        case 775: break;
        case 695: 
          {  return symbol(sym.onkeydown);  }
        case 776: break;
        case 694: 
          {  return symbol(sym.onmouseup);  }
        case 777: break;
        case 450: 
          {  return symbol(sym.smallOpen);  }
        case 778: break;
        case 449: 
          {  return symbol(sym.frameOpen);  }
        case 779: break;
        case 442: 
          {  return symbol(sym.fontClose);  }
        case 780: break;
        case 441: 
          {  return symbol(sym.formClose);  }
        case 781: break;
        case 439: 
          {  return symbol(sym.bodyClose);  }
        case 782: break;
        case 343: 
          {  return symbol(sym.fontOpen);  }
        case 783: break;
        case 342: 
          {  return symbol(sym.formOpen);  }
        case 784: break;
        case 338: 
          {  return symbol(sym.supClose);  }
        case 785: break;
        case 337: 
          {  return symbol(sym.subClose);  }
        case 786: break;
        case 328: 
          {  return symbol(sym.bodyOpen);  }
        case 787: break;
        case 453: 
          {  return symbol(sym.tableOpen);  }
        case 788: break;
        case 628: 
          {  return symbol(sym.disabled);  }
        case 789: break;
        case 635: 
          {  return symbol(sym.multiple);  }
        case 790: break;
        case 637: 
          {  return symbol(sym.selected);  }
        case 791: break;
        case 642: 
          {  return symbol(sym.noresize);  }
        case 792: break;
        case 645: 
          {  return symbol(sym.controls);  }
        case 793: break;
        case 650: 
          {  return symbol(sym., charset);  }
        case 794: break;
        case 666: 
          {  return symbol(sym.onsubmit);  }
        case 795: break;
        case 667: 
          {  return symbol(sym.onunload);  }
        case 796: break;
        case 668: 
          {  return symbol(sym.onchange);  }
        case 797: break;
        case 678: 
          {  return symbol(sym.tabindex);  }
        case 798: break;
        case 679: 
          {  return symbol(sym.longdesc);  }
        case 799: break;
        case 683: 
          {  return symbol(sym.hreflang);  }
        case 800: break;
        case 427: 
          {  return symbol(sym.chr);  }
        case 801: break;
        case 282: 
          {  return symbol(sym.src);  }
        case 802: break;
        case 272: 
          {  return symbol(sym.alt);  }
        case 803: break;
        case 269: 
          {  return symbol(sym.rev);  }
        case 804: break;
        case 268: 
          {  return symbol(sym.rel);  }
        case 805: break;
        case 263: 
          {  return symbol(sym.dir);  }
        case 806: break;
        case 242: 
          {  return symbol(sym.img);  }
        case 807: break;
        case 87: 
          {  return symbol(sym.br);  }
        case 808: break;
        case 119: 
          {  return symbol(sym.hr);  }
        case 809: break;
        case 180: 
          {  return symbol(sym.id);  }
        case 810: break;
        case 518: 
          {  return symbol(sym.cls);  }
        case 811: break;
        case 741: 
          {  return symbol(sym.marginheight);  }
        case 812: break;
        case 739: 
          {  return symbol(sym.framespacing);  }
        case 813: break;
        case 738: 
          {  return symbol(sym.bgproperties);  }
        case 814: break;
        case 685: 
          {  return symbol(sym.noframesClose);  }
        case 815: break;
        case 684: 
          {  return symbol(sym.framesetClose);  }
        case 816: break;
        case 655: 
          {  return symbol(sym.framesetOpen);  }
        case 817: break;
        case 656: 
          {  return symbol(sym.noframesOpen);  }
        case 818: break;
        case 429: 
          {  return symbol(sym.href);  }
        case 819: break;
        case 420: 
          {  return symbol(sym.cols);  }
        case 820: break;
        case 414: 
          {  return symbol(sym.link);  }
        case 821: break;
        case 412: 
          {  return symbol(sym.lang);  }
        case 822: break;
        case 408: 
          {  return symbol(sym.loop);  }
        case 823: break;
        case 406: 
          {  return symbol(sym.ismap);  }
        case 824: break;
        case 405: 
          {  return symbol(sym.name);  }
        case 825: break;
        case 400: 
          {  return symbol(sym.text);  }
        case 826: break;
        case 397: 
          {  return symbol(sym.type);  }
        case 827: break;
        case 391: 
          {  return symbol(sym.size);  }
        case 828: break;
        case 383: 
          {  return symbol(sym.axis);  }
        case 829: break;
        case 377: 
          {  return symbol(sym.abbr);  }
        case 830: break;
        case 375: 
          {  return symbol(sym.rows);  }
        case 831: break;
        case 373: 
          {  return symbol(sym.face);  }
        case 832: break;
        case 21: 
          {  return symbol(sym.bOpen);  }
        case 833: break;
        case 25: 
          {  return symbol(sym.aOpen);  }
        case 834: break;
        case 29: 
          {  return symbol(sym.iOpen);  }
        case 835: break;
        case 30: 
          {  return symbol(sym.pOpen);  }
        case 836: break;
        case 31: 
          {  return symbol(sym.uOpen);  }
        case 837: break;
        case 452: 
          {  return symbol(sym.tbody);  }
        case 838: break;
        case 456: 
          {  return symbol(sym.input);  }
        case 839: break;
        case 480: 
          {  return symbol(sym.frame);  }
        case 840: break;
        case 482: 
          {  return symbol(sym.rules);  }
        case 841: break;
        case 483: 
          {  return symbol(sym.alink);  }
        case 842: break;
        case 484: 
          {  return symbol(sym.align);  }
        case 843: break;
        case 493: 
          {  return symbol(sym.style);  }
        case 844: break;
        case 494: 
          {  return symbol(sym.start);  }
        case 845: break;
        case 496: 
          {  return symbol(sym.scope);  }
        case 846: break;
        case 498: 
          {  return symbol(sym.shape);  }
        case 847: break;
        case 502: 
          {  return symbol(sym.title);  }
        case 848: break;
        case 509: 
          {  return symbol(sym.label);  }
        case 849: break;
        case 514: 
          {  return symbol(sym.color);  }
        case 850: break;
        case 519: 
          {  return symbol(sym.clear);  }
        case 851: break;
        case 526: 
          {  return symbol(sym.width);  }
        case 852: break;
        case 528: 
          {  return symbol(sym.value);  }
        case 853: break;
        case 530: 
          {  return symbol(sym.vlink);  }
        case 854: break;
        case 751: 
          {  return symbol(sym.bordercolorlight);  }
        case 855: break;
        case 750: 
          {  return symbol(sym.acceptcharlist);  }
        case 856: break;
        case 748: 
          {  return symbol(sym.bordercolordark);  }
        case 857: break;
        case 237: 
          {  return symbol(sym.supOpen);  }
        case 858: break;
        case 236: 
          {  return symbol(sym.subOpen);  }
        case 859: break;
        case 230: 
          {  return symbol(sym.h6Close);  }
        case 860: break;
        case 229: 
          {  return symbol(sym.h5Close);  }
        case 861: break;
        case 228: 
          {  return symbol(sym.h4Close);  }
        case 862: break;
        case 117: 
          {  return symbol(sym.liOpen);  }
        case 863: break;
        case 116: 
          {  return symbol(sym.ulOpen);  }
        case 864: break;
        case 112: 
          {  return symbol(sym.thOpen);  }
        case 865: break;
        case 110: 
          {  return symbol(sym.trOpen);  }
        case 866: break;
        case 109: 
          {  return symbol(sym.tdOpen);  }
        case 867: break;
        case 99: 
          {  return symbol(sym.uClose);  }
        case 868: break;
        case 97: 
          {  return symbol(sym.iClose);  }
        case 869: break;
        case 93: 
          {  return symbol(sym.aClose);  }
        case 870: break;
        case 90: 
          {  return symbol(sym.bClose);  }
        case 871: break;
        case 2: 
          {  return symbol(sym.endTag);  }
        case 872: break;
        case 89: 
          {  return symbol(sym.olOpen);  }
        case 873: break;
        case 120: 
          {  return symbol(sym.h1Open);  }
        case 874: break;
        case 121: 
          {  return symbol(sym.h2Open);  }
        case 875: break;
        case 122: 
          {  return symbol(sym.h3Open);  }
        case 876: break;
        case 123: 
          {  return symbol(sym.h4Open);  }
        case 877: break;
        case 124: 
          {  return symbol(sym.h5Open);  }
        case 878: break;
        case 125: 
          {  return symbol(sym.h6Open);  }
        case 879: break;
        case 210: 
          {  return symbol(sym.olClose);  }
        case 880: break;
        case 216: 
          {  return symbol(sym.tdClose);  }
        case 881: break;
        case 217: 
          {  return symbol(sym.trClose);  }
        case 882: break;
        case 219: 
          {  return symbol(sym.thClose);  }
        case 883: break;
        case 221: 
          {  return symbol(sym.pClose);  }
        case 884: break;
        case 222: 
          {  return symbol(sym.ulClose);  }
        case 885: break;
        case 223: 
          {  return symbol(sym.liClose);  }
        case 886: break;
        case 225: 
          {  return symbol(sym.h1Close);  }
        case 887: break;
        case 226: 
          {  return symbol(sym.h2Close);  }
        case 888: break;
        case 227: 
          {  return symbol(sym.h3Close);  }
        case 889: break;
        case 454: 
          {  return symbol(sym.thread);  }
        case 890: break;
        case 505: 
          {  return symbol(sym.nowrap);  }
        case 891: break;
        case 544: 
          {  return symbol(sym.border);  }
        case 892: break;
        case 548: 
          {  return symbol(sym.onblur);  }
        case 893: break;
        case 557: 
          {  return symbol(sym.onload);  }
        case 894: break;
        case 563: 
          {  return symbol(sym. dynsrc);  }
        case 895: break;
        case 567: 
          {  return symbol(sym.action);  }
        case 896: break;
        case 572: 
          {  return symbol(sym. method);  }
        case 897: break;
        case 580: 
          {  return symbol(sym.target);  }
        case 898: break;
        case 582: 
          {  return symbol(sym.noshade);  }
        case 899: break;
        case 583: 
          {  return symbol(sym.usemap);  }
        case 900: break;
        case 585: 
          {  return symbol(sym.lowsrc);  }
        case 901: break;
        case 587: 
          {  return symbol(sym.coords);  }
        case 902: break;
        case 588: 
          {  return symbol(sym.compact);  }
        case 903: break;
        case 597: 
          {  return symbol(sym.height);  }
        case 904: break;
        case 598: 
          {  return symbol(sym.hspace);  }
        case 905: break;
        case 599: 
          {  return symbol(sym.valign);  }
        case 906: break;
        case 600: 
          {  return symbol(sym.vspace);  }
        case 907: break;
        case 611: 
          {  return symbol(sym.bgcolor);  }
        case 908: break;
        case 613: 
          {  return symbol(sym.onfocus);  }
        case 909: break;
        case 614: 
          {  return symbol(sym.onreset);  }
        case 910: break;
        case 615: 
          {  return symbol(sym.onabort);  }
        case 911: break;
        case 620: 
          {  return symbol(sym.onerror);  }
        case 912: break;
        case 623: 
          {  return symbol(sym.onclick);  }
        case 913: break;
        case 627: 
          {  return symbol(sym.onkeyup);  }
        case 914: break;
        case 630: 
          {  return symbol(sym.rowspan);  }
        case 915: break;
        case 636: 
          {  return symbol(sym.enctype);  }
        case 916: break;
        case 638: 
          {  return symbol(sym.summary);  }
        case 917: break;
        case 646: 
          {  return symbol(sym.colspan);  }
        case 918: break;
        case 649: 
          {  return symbol(sym.charoff);  }
        case 919: break;
        case 652: 
          {  return symbol(sym.headers);  }
        case 920: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            yy_do_eof();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
